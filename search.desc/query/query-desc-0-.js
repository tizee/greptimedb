searchState.loadedDescShard("query", 0, "Planner, QueryEngine implementations based on DataFusion.\nDummy catalog for region server.\nDataFrame represents a logical set of rows with the same …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNote in SQL queries, aggregate names are looked up using …\nRegister an UDF function. Will override if the function …\nRegister a <code>ScalarUdf</code>.\nSNAFU context selector for the …\nSNAFU context selector for the <code>InnerError::ConvertSchema</code> …\nSNAFU context selector for the <code>InnerError::Datafusion</code> …\nSNAFU context selector for the …\nInner error of datafusion based query engine.\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn logical plan phase it only contains one input\nIf this plan is a placeholder\nExtensionPlanner implementation for distributed planner\nStatus of the rewriter to mark if the current pass is …\ndescend\nascend\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent level in the tree\nPartition columns of the table in current pass\npop one stack item and reduce the level by 1\nReturn true if should stop and expand. The input plan is …\nSimulated stack for the <code>rewrite</code> recursion\nStages to be expanded\nFor unrelated plans like DDL\nReturn true if the given expr and partition cols satisfied …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNanosecond elapsed till the scan operator finished …\nNanosecond elapsed till the first record batch emitted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGauge for greptime plan execution cost metrics for output\nIn logical plan phase it only contains one input\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a LogicalPlan::Extension node from this merge scan …\nIf this plan is a placeholder\nCount of rows fetched from remote\nNanosecond elapsed till the scan operator is ready to emit …\nAn ordinary physical table.\nVisitor to extract table name from logical plan (TableScan …\nIndicates the type of this table for metadata/catalog …\nA transient table.\nA non-materialised table that itself uses a query …\nExtract fully resolved table name from logical plan\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply the fully resolved table name to the TableScan plan\nResolve to the given region (specified by RegionId) …\nA dummy catalog provider for DummyCatalogList.\nA dummy schema provider for DummyCatalogList.\nFor TableProvider and DummyCatalogList\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new provider.\nKeeping a mutable request makes it possible to change in …\nSets the ordering hint of the query to the provider.\nCreates a new catalog list with the given table provider.\nSNAFU context selector for the <code>Error::AddSystemTimeOverflow</code>…\nSNAFU context selector for the <code>Error::BuildBackend</code> variant\nSNAFU context selector for the <code>Error::BuildRegex</code> variant\nSNAFU context selector for the <code>Error::CatalogNotFound</code> …\nSNAFU context selector for the <code>Error::Catalog</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ColumnSchemaNoDefault</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ConvertSchema</code> variant\nSNAFU context selector for the <code>Error::ConvertSqlType</code> …\nSNAFU context selector for the <code>Error::ConvertSqlValue</code> …\nSNAFU context selector for the <code>Error::CreateRecordBatch</code> …\nSNAFU context selector for the <code>Error::DataFusion</code> variant\nSNAFU context selector for the …\nContains the error value\nSNAFU context selector for the <code>Error::GetRegionMetadata</code> …\nSNAFU context selector for the <code>Error::InferSchema</code> variant\nSNAFU context selector for the <code>Error::InvalidTimestamp</code> …\nSNAFU context selector for the <code>Error::ListObjects</code> variant\nSNAFU context selector for the <code>Error::MissingRequiredField</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::MultipleStatements</code> …\nContains the success value\nSNAFU context selector for the <code>Error::ParseFileFormat</code> …\nSNAFU context selector for the <code>Error::ParseFloat</code> variant\nSNAFU context selector for the <code>Error::ParseTimestamp</code> …\nSNAFU context selector for the <code>Error::PlanSql</code> variant\nSNAFU context selector for the <code>Error::QueryAccessDenied</code> …\nSNAFU context selector for the <code>Error::QueryExecution</code> …\nSNAFU context selector for the <code>Error::QueryParse</code> variant\nSNAFU context selector for the <code>Error::QueryPlan</code> variant\nSNAFU context selector for the <code>Error::RangeQuery</code> variant\nSNAFU context selector for the <code>Error::RegionQuery</code> variant\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::Sql</code> variant\nSNAFU context selector for the <code>Error::TableMutation</code> variant\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::TimeIndexNotFound</code> …\nSNAFU context selector for the <code>Error::Unimplemented</code> variant\nSNAFU context selector for the <code>Error::UnknownTable</code> variant\nSNAFU context selector for the <code>Error::UnsupportedExpr</code> …\nSNAFU context selector for the <code>Error::UnsupportedVariable</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutor to run PhysicalPlan.\nLogical plan optimizer, rewrite the <code>LogicalPlan</code> in some …\nOptimize the <code>plan</code>\nA stream to call the callback once a RecordBatch stream is …\nTimer of different stages in query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttaches a <code>callback</code> to invoke once the <code>stream</code> is …\n<code>ExtensionAnalyzerRule</code>s transform <code>LogicalPlan</code>s in some way …\nRewrite <code>plan</code>\nA replacement to DataFusion’s <code>CountWildcardRule</code>. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis rule will pass the nearest order requirement to the …\nFind the most closest order requirement to the leaf node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is PhysicalOptimizerRule to remove duplicate physical …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStringNormalizationRule normalizes(trims) string values in …\nremove extra whitespaces from the String value when there …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypeConversionRule converts some literal values in logical …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe implementation of the <code>$name_expr</code> extension AST node\nThe implementation of the <code>$name_expr</code> extension AST node\nThe implementation of the <code>$name_expr</code> extension AST node\nThe implementation of the <code>$name_expr</code> extension AST node\nQuery language parser, supports parsing SQL and PromQL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to parse PromQL, return the statement when success.\nTry to parse SQL with GreptimeDB dialect, return the …\nPhysical query planner that converts a <code>LogicalPlan</code> to an …\nCreate a physical plan from a logical plan\nwrap physical plan with additional layer e.g: metrics …\nA LogicalPlan represents the different types of relational …\nReturn a <code>format</code>able structure that produces a single line …\nReturns the argument unchanged.\nWalk the logical plan, find any <code>PlaceHolder</code> tokens, and …\nCalls <code>U::from(self)</code>.\nReturn a logical plan with all placeholders/params (e.g $1 …\nGet the schema for this logical plan\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerate a relational expression from a SQL expression\nDescribe statement result\nQuery engine global state\nReturns the query engine as Any so that it can be downcast …\nDescribe the given <code>LogicalPlan</code>.\nCreate a <code>QueryEngineContext</code>.\nExecute the given <code>LogicalPlan</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logical plan for statement\nReturns the query engine name.\nReturns the logical planner\nCreate a DataFrame from a table.\nRegister an aggregate function.\nRegister a SQL function. Will override if the function …\nRegister all functions implemented by GreptimeDB\nRegister a <code>ScalarUdf</code>.\nThe schema of statement\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery engine global state\nRetrieve the aggregate function by name\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimize the logical plan by the extension anayzer rules.\nReturns the <code>ProcedureServiceHandlerRef</code> in state.\nCreate a DataFrame for a table\nRegister an aggregate function.\nRegister an udf function. Will override if the function …\nRegister a <code>ScalarUdf</code>.\nReturns the <code>TableMutationHandlerRef</code> in state.\nRetrieve the udf function by name\nImplementation of <code>first_value</code>/<code>last_value</code> aggregate …\nthe unit of <code>align</code> is millisecond\nkey: align_ts value: a vector, each element is a range_fn …\nThe input <code>data</code> contains data on a complete time series. If …\ncalculate expr\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe incoming logical plan\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nuse <code>(ts[i1], data[i1])</code>, <code>(ts[i2], data[i2])</code> as endpoint, …\nkey: <code>(hash of by rows, align_ts)</code> value: <code>[row_ids]</code> It is …\nwith format like <code>max(a) RANGE 300s [FILL NULL]</code>\nIf the <code>FIll</code> strategy is <code>Linear</code> and the output is an …\nThe number of rows of not null rows in the final output\nUse <code>align_to</code> as time origin. According to <code>align</code> as time …\nall range expressions\nby values written by <code>RowWriter</code>\nConverter for the by values\nthe schema of output column\nThe schema before run projection, follow the order of …\nIf the <code>schema</code> of the <code>RangeSelect</code> happens to be the same as …\nkey: time series’s hash value value: time series’s …\nColumn index of TIME INDEX column’s position in the …\n<code>RangeExprRewriter</code> will recursively search certain <code>Expr</code>, …\nIn order to implement RangeSelect query like …\nReturns the argument unchanged.\nReturns the argument unchanged.\nthis function use to find the time_index column and row …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse the <code>align to</code> clause and return a UTC timestamp with …\nParse a duraion expr:\nUse <code>BTreeSet</code> to avoid in case like …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSHOW index columns\nThis function checks if the column schemas from a file can …\nCreate a CreateTable statement from table info.\nCast a <code>show</code> statement execution into a query from tables …\nExecute <code>SHOW CHARSET</code> statement and returns the <code>Output</code> if …\nExecute <code>SHOW COLLATION</code> statement and returns the <code>Output</code> if …\nExecute <code>SHOW COLUMNS</code> statement.\nImplementation of <code>SHOW CREATE TABLE</code> statement.\nExecute <code>SHOW INDEX</code> statement.\nCreate a CreateTable statement from table info.")