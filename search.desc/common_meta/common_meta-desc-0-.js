searchState.loadedDescShard("common_meta", 0, "This mod defines all the keys used in the metadata store …\nPlaces context of invalidating cache. e.g., span id, trace …\nKvBackend cache invalidator\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClusterInfo provides information about the cluster.\nThe status of a datanode.\nThe status of a frontend.\nThe status of a metasrv.\nThe information of a node in the cluster.\nThe key of NodeInfo in the storage. The format is …\nThe cluster id.\nHow many follower regions on this node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast activity time in milliseconds.\nHow many leader regions on this node.\nList all nodes by role in the cluster. If <code>role</code> is <code>None</code>, …\nThe node id.\nThe peer information. [node_id, address]\nThe read capacity units during this period.\nThe role of the node. It can be <code>[Role::Datanode]</code> or …\nThe status of the node. Different roles have different …\nThe write capacity units during this period.\nThe context of ddl.\nThe procedure executor that accepts ddl, region migration …\nMetadata allocated to a table.\nCache invalidation.\nAllocator for flow metadata.\nFlow metadata manager.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep tracking operating regions.\nSubmit a region migration task\nSends querying and requests to nodes.\nQuery the procedure state by its id\nThe encoded wal options for regions of the table.\nSubmit a ddl task\nTable id.\nAllocator for table metadata.\nTable metadata manager.\nRoute information for each region of the table.\nBroadcasts the invalidating table cache instruction.\nPrepares to alter the table\nUpdates table metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPhysical table info\nTable info values before the alter operation. …\nThe alter table procedure\nBroadcasts the invalidating table cache instruction.\nPrepares to alter the table.\nSends alter region requests to Datanode.\nUpdates table metadata.\nBuilds new_meta\nChecks:\nFetches the table info.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes alter region request.\nBroadcasts the invalidating table cache instructions.\nUpdate table metadata.\nUpdates table metadata for alter table operation.\nUpdates table metadata for rename table operation.\nTable info value before alteration.\nCreates region proto alter kind from <code>table_info</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe serializable data.\nThe procedure of flow creation.\nThe state of CreateFlowProcedure.\nCreates flows on the flownode.\nCreate metadata.\nPrepares to create the flow.\nAllocates the [FlowId].\nChecks:\nEnsures all source tables exist and collects source table …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes from <code>json</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new CreateFlowProcedure.\nCreates flow metadata.\nCreates metadata\nCreates regions on the Datanode\nPrepares to create the tables\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates table metadata for logical tables and update …\nOn the prepares step, it performs:\nReturns the remaining tasks. The length of tasks must be …\nCreates metadata\nCreates regions on the Datanode\nPrepares to create the table\nThe serializable data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates table metadata\nCreates regions on datanodes\nOn the prepare step, it performs:\nThe guards of opening.\nNone stands for not allocated yet.\nRegisters and returns the guards of the opening region if …\nNone stands for not allocated yet.\nBuilder for [PbCreateRegionRequest].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional. Only for metric engine.\nContext of DropDatabaseProcedure execution.\nTarget of dropping tables.\nReturns as Any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nYields the next State and Status.\nThe context of procedure runtime.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new DropDatabaseCursor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new DropDatabaseExecutor.\nThe physical table region routes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates frontend caches\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether schema exists.\nDrops regions on Datanode\nDeletes metadata logically\nDeletes metadata tombstone permanently\nThe state of drop table.\nInvalidates Table Cache\nPrepares to drop the table\nThe context of procedure runtime.\nThe serializable data.\nThe guards of opening regions.\nThe drop table executor.\nFetches the table info and physical table route.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBroadcasts invalidate table cache instruction.\nRemoves the table metadata.\nDeletes metadata tombstone.\nRegister dropping regions if doesn’t exist.\nControl indicated to the caller whether to go to the next …\nDropTableExecutor performs:\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates frontend caches\nReturns the DropTableExecutor.\nDeletes the table metadata <strong>logically</strong>.\nDeletes the table metadata tombstone <strong>permanently</strong>.\nDeletes metadata for table <strong>permanently</strong>.\nDrops region on datanode.\nChecks whether table exists.\nRestores the table metadata.\nReturns true if it’s Control::Stop.\nFlowMetadataAllocator provides the ability of:\nThe reference of FlowMetadataAllocator.\nAllocates Peers for partitions.\nPartitionPeerAllocatorRef allocates Peers for partitions.\nAllocates Peer nodes for storing partitions.\nAllocates a the FlowId.\nAllocates the FlowId and Peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowMetadataAllocator with …\nGenerate the new physical table info.\nPeerAllocator allocates Peers for creating regions.\nAllocates <code>regions</code> size Peers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestAlterTableExpr</code>.\nError type for TestAlterTableExprBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestAlterTableExpr</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestColumnDef</code>.\nError type for TestColumnDefBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestColumnDef</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>TestCreateTableExpr</code>.\nError type for TestCreateTableExprBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>TestCreateTableExpr</code>.\nBuilds RawTableInfo from CreateTableExpr.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSNAFU context selector for the <code>MockRequestOutdatedError</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTruncates regions on Datanode\nPrepares to truncate the table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds Peer context if the error is unretryable.\nThe DdlManager provides the ability to execute Ddl.\nBuilder for <code>DdlManager</code>.\nError type for DdlManagerBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>DdlManager</code>.\nReturns the DdlContext\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters all Ddl loaders.\nSubmits and executes alter multiple table tasks.\nSubmits and executes an alter table task.\nSubmits and executes a create database task.\nSubmits and executes a create flow task.\nSubmits and executes a create multiple logical table tasks.\nSubmits and executes a create table task.\nSubmits and executes a drop table task.\nSubmits and executes a drop table task.\nSubmits and executes a truncate table task.\nReturns the TableMetadataManagerRef.\nReturns a new DdlManager with all Ddl BoxedProcedureLoader…\nWhen creating table or region failover, a target node …\nThe frontend will also send heartbeats to Metasrv, sending …\nHeartbeat interval time (is the basic unit of various …\nThe default mailbox round-trip timeout.\nIn a lease, there are two opportunities for renewal.\nThe lease seconds of metasrv leader.\nThe lease seconds of a region. It’s set by 3 heartbeat …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::BuildKafkaClient</code> …\nSNAFU context selector for the <code>Error::BuildKafkaCtrlClient</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::BuildTableMeta</code> …\nSNAFU context selector for the <code>Error::CacheNotGet</code> variant\nSNAFU context selector for the <code>Error::CatalogAlreadyExists</code> …\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ConvertRawKey</code> variant\nSNAFU context selector for the <code>Error::ConvertRawTableInfo</code> …\nSNAFU context selector for the <code>Error::CreateKafkaWalTopic</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::DecodeJson</code> variant\nSNAFU context selector for the <code>Error::DecodeProto</code> variant\nSNAFU context selector for the <code>Error::DelimiterNotFound</code> …\nSNAFU context selector for the <code>Error::EmptyDdlTasks</code> variant\nSNAFU context selector for the <code>Error::EmptyKey</code> variant\nSNAFU context selector for the <code>Error::EmptyTopicPool</code> …\nSNAFU context selector for the <code>Error::EncodeJson</code> variant\nSNAFU context selector for the <code>Error::EncodeWalOptions</code> …\nContains the error value\nSNAFU context selector for the <code>Error::EtcdFailed</code> variant\nSNAFU context selector for the <code>Error::EtcdTxnFailed</code> variant\nSNAFU context selector for the <code>Error::EtcdTxnOpResponse</code> …\nSNAFU context selector for the <code>Error::External</code> variant\nSNAFU context selector for the <code>Error::FlowAlreadyExists</code> …\nSNAFU context selector for the <code>Error::FromUtf8</code> variant\nSNAFU context selector for the <code>Error::GetKvCache</code> variant\nSNAFU context selector for the <code>Error::IllegalServerState</code> …\nSNAFU context selector for the <code>Error::InvalidCatalogValue</code> …\nSNAFU context selector for the <code>Error::InvalidEngineType</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidNodeInfoKey</code> …\nSNAFU context selector for the <code>Error::InvalidNumTopics</code> …\nSNAFU context selector for the <code>Error::InvalidProtoMsg</code> …\nSNAFU context selector for the <code>Error::InvalidRole</code> variant\nSNAFU context selector for the <code>Error::InvalidTableMetadata</code> …\nSNAFU context selector for the <code>Error::InvalidTxnResult</code> …\nSNAFU context selector for the <code>Error::MetadataCorruption</code> …\nSNAFU context selector for the <code>Error::MismatchPrefix</code> …\nSNAFU context selector for the <code>Error::MoveRegion</code> variant\nSNAFU context selector for the <code>Error::MoveValues</code> variant\nSNAFU context selector for the <code>Error::NextSequence</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::OperateDatanode</code> …\nSNAFU context selector for the <code>Error::ParseNum</code> variant\nSNAFU context selector for the <code>Error::ParseOption</code> variant\nSNAFU context selector for the <code>Error::ParseProcedureId</code> …\nSNAFU context selector for the <code>Error::PayloadNotExist</code> …\nSNAFU context selector for the <code>Error::PrimaryKeyNotFound</code> …\nSNAFU context selector for the <code>Error::ProcedureNotFound</code> …\nSNAFU context selector for the <code>Error::ProcedureOutput</code> …\nSNAFU context selector for the <code>Error::ProduceRecord</code> variant\nSNAFU context selector for the <code>Error::QueryProcedure</code> …\nSNAFU context selector for the <code>Error::RegionOperatingRace</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::RenameTable</code> variant\nSNAFU context selector for the <code>Error::ResolveKafkaEndpoint</code> …\nSNAFU context selector for the <code>Error::RetryLater</code> variant\nSNAFU context selector for the <code>Error::RouteInfoCorrupted</code> …\nSNAFU context selector for the <code>Error::SchemaAlreadyExists</code> …\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SendMessage</code> variant\nSNAFU context selector for the <code>Error::SequenceOutOfRange</code> …\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SubmitProcedure</code> …\nSNAFU context selector for the <code>Error::TableAlreadyExists</code> …\nSNAFU context selector for the <code>Error::TableInfoNotFound</code> …\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::TableRouteNotFound</code> …\nSNAFU context selector for the <code>Error::Table</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Unexpected</code> variant\nSNAFU context selector for the <code>Error::Unsupported</code> variant\nSNAFU context selector for the <code>Error::WaitProcedure</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the response exceeds the size limit.\nDetermine whether it is a retry later type through …\nCreates a new Error::RetryLater error from source <code>err</code>.\nHandleControl\nHeartbeatResponseHandler\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe identifier of cache.\nCloses a region.\nThe instruction of downgrading leader region.\nDowngrades a region.\nThe result of downgrade leader region.\nInvalidates batch cache.\nOpens a region.\nUpgrades a follower region to leader region.\nUpgrades a region.\nThe reply of UpgradeRegion.\nReturn error if any during the operation.\nReturns error if any.\nIndicates whether the region exists.\nIndicates whether the region exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>last_entry_id</code> if available.\nThe <code>last_entry_id</code> of old leader region.\nReturns true if <code>last_entry_id</code> has been replayed to the …\nThe RegionId.\nThe RegionId.\nThe timeout of waiting for a wal replay.\nCATALOG_NAME_KEY: {CATALOG_NAME_KEY_PREFIX}/{catalog_name}\nA struct containing a deserialized value(<code>inner</code>) and an …\nThe id of flow.\nThe partition of flow.\nThe key of metadata.\nSCHEMA_NAME_KEY: …\nCreates metadata for multiple logical tables and return an …\nCreates metadata for table and returns an error if …\nDeletes metadata for table <strong>logically</strong>. The caller MUST …\nDeletes metadata tombstone for table <strong>permanently</strong>. The …\nDeserialize behaviors:The <code>inner</code> field will be deserialized …\nDeletes metadata for table <strong>permanently</strong>. The caller MUST …\nTODO(weny):removes id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a struct containing a deserialized value and an …\nReturns a struct containing a deserialized value and an …\nReturns original <code>bytes</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenames the table name and returns an error if different …\nRestores metadata for table. The caller MUST ensure it has …\nSerialize behaviors:The <code>inner</code> field will be ignored.\nUpdates the leader status of the RegionRoute.\nUpdates table info and returns an error if different …\nThe catalog name key, indices all catalog names\nDecoder <code>KeyValue</code> to {catalog}\nCreates <code>CatalogNameKey</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key mapping {datanode_id} to {table_id}\nRegionInfo For compatible reason, DON’T modify the field …\nBuilds the create datanode table transactions. It only …\nBuilds the delete datanode table transactions. It only …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds the update datanode table transactions. It only …\nDecodes <code>KeyValue</code> to ((),<code>DatanodeTableValue</code>)\nThe table engine, it SHOULD be immutable after created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe region options.\nThe region storage path, it SHOULD be immutable after …\nThe per-region wal options. Key: region number. Value: the …\nThe manager of metadata, provides ability to:\nThe key of <code>__flow/</code> scope.\nCreates metadata for flow and returns an error if …\nReturns the [FlowManager].\nReturns the FlowNameManager.\nReturns the FlownodeFlowManager.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new FlowMetadataManager.\nReturns a new FlowScoped key.\nReturns the TableFlowManager.\nThe key stores the metadata of the flow.\nThe key of flow metadata.\nThe manager of FlowInfoKey.\nBuilds a create flow transaction. It is expected that the …\nThe catalog name.\nThe comment.\nThe expr of expire.\nReturns the FlowId.\nThe flow name.\nReturns the <code>flownode_id</code>.\nWhich flow nodes this flow is running on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the FlowInfoValue of specified <code>flow_id</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowInfoKey.\nReturns a new FlowInfoManager.\nReturns a FlowInfoKey with the specified <code>flow_id</code>.\nThe options.\nThe raw sql.\nThe sink table used by the flow.\nReturns the <code>source_table</code>.\nThe source tables used by the flow.\nThe key of mapping {flow_name} to FlowId.\nThe key of mapping name to FlowId\nThe manager of FlowNameKey.\nThe value of FlowNameKey.\nBuilds a create flow name transaction. It’s expected …\nReturns the catalog.\nReturns true if the <code>flow</code> exists.\nReturns the FlowId\nReturn the <code>flow_name</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the FlowNameValue of specified <code>catalog.flow</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the FlowNameKey\nReturns a new FlowNameManager.\nReturns a FlowNameKeyInner.\nReturns a FlowNameValue with specified FlowId.\nThe key of mapping FlownodeId to FlowId.\nThe key of mapping FlownodeId to FlowId.\nThe manager of FlownodeFlowKey.\nBuilds a create flownode flow transaction.\nReturns the FlowId.\nDecodes <code>KeyValue</code> to FlownodeFlowKey.\nReturns the FlownodeId.\nRetrieves all FlowId and FlowPartitionIds of the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new FlownodeFlowKey.\nReturns a FlownodeFlowKey with the specified <code>flownode_id</code>, …\nReturns a new FlownodeFlowManager.\nReturns the [PartitionId].\nThe prefix used to retrieve all FlownodeFlowKeys with the …\nThe prefix used to retrieve all FlownodeFlowKeys with the …\nThe key of mapping TableId to FlownodeId and FlowId.\nThe key of mapping TableId to FlownodeId and FlowId.\nThe manager of TableFlowKey.\nBuilds a create table flow transaction.\nReturns the FlowId.\nReturns the FlownodeId.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new TableFlowManager.\nReturns a new TableFlowKey.\nReturns a new TableFlowKey.\nRetrieves all TableFlowKeys of the specified <code>table_id</code>.\nReturns the [PartitionId].\nThe prefix used to retrieve all TableFlowKeys with the …\nThe prefix used to retrieve all TableFlowKeys with the …\nReturns the source TableId.\nDecodes <code>KeyValue</code> to TableFlowKey.\nThe schema name key, indices all schema names belong to …\nCreates <code>SchemaNameKey</code>.\nDeletes a SchemaNameKey.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes <code>KeyValue</code> to {schema}\nReturns a schema stream, it lists all schemas belong to …\nThe key stores the metadata of the table.\nReturns batch of <code>DeserializedValueWithBytes&lt;TableInfoValue&gt;</code>…\nBuilds a create table info transaction, it expected the …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table info transaction, it expected the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new TableInfoKey.\nBuilds a create table name transaction. It only executes …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table name transaction. It only executes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes <code>KeyValue</code> to ({table_name}, TableNameValue)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key stores table routes\nLow-level operations of TableRouteValue.\nReturns the reference of <code>PhysicalTableRouteValue</code>.\nReturns batch of <code>TableRouteValue</code> that respects the order …\nReturns the TableRouteValue::Physical recursively.\nBuilds a create table route transaction, it expected the …\nReturns a TxnOp to retrieve the corresponding value and a …\nBuilds a update table route transaction, it expected the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>TableRouteValue</code>.\nReturns the TableId recursively.\nReturns the TableRouteValue::Physical recursively.\nReturns the <code>TableRouteValue</code> wrapped with …\nReturns the physical …\nReturns <code>RegionDistribution</code> of the table(<code>table_id</code>).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to <code>PhysicalTableRouteValue</code>.\nReturns true if it’s TableRouteValue::Physical.\nReturns a TableRouteValue::Physical if <code>table_id</code> equals …\nReturns the corresponding RegionRoute, returns <code>None</code> if it…\nGets the RegionRoutes of this TableRouteValue::Physical.\nReturns low-level APIs.\nReturns the <code>PhysicalTableRouteValue</code> in the first level, It …\nReturns a new version TableRouteValue with <code>region_routes</code>.\nReturns the version.\nTombstoneManager provides the ability to:\nMoves value to <code>dest_key</code>.\nCreates tombstones for keys.\nDeletes tombstones values for the specified <code>keys</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoves values to <code>dest_key</code>.\nReturns TombstoneManager.\nRestores tombstones for keys.\nThe response set of TxnOpResponse::ResponseGet\nReturns a decoder to decode bytes to …\nReturns a filter to consume a KeyValue where the key …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns previous key-value pair if <code>prev_kv</code> is <code>true</code>.\nCheck if the key exists, not returning the value. If the …\nPuts a value at a key. If <code>if_not_exists</code> is <code>true</code>, the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTakes a list of operations. The operations list will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of operations permitted in a transaction.\nTakes a list of operations. The operations list will be …\nNone means the key does not exist.\nTakes a list of comparison. If all comparisons passed in …\nCatalogLock acquires the lock on the tenant level.\nFlowNameLock prevents any procedures trying to create a …\nRegionLock acquires the lock on the region level.\nSchemaLock acquires the lock on the database level.\nTableLock acquires the lock on the table level.\nTableNameLock prevents any procedures trying to create a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe trait for handling requests to datanode.\nThe trait for handling requests to flownode\nDatanode manager\nRetrieves a target <code>datanode</code>.\nRetrieves a target <code>flownode</code>.\nHandles DML, and DDL requests.\nHandles query requests\nReturns the argument unchanged.\nNode identifier. Unique in a cluster.\nCalls <code>U::from(self)</code>.\nThe Range Request’s default page size.\nDecoding key value pairs.\nError\nAt the start of reading.\nRetrieving data from backend.\nIt reduces the page size if the response size exceeds the …\nDecreases the <code>page size</code> if the response message size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey is the first key for the range, If range_end is not …\nkeys_only when set returns only the keys and not the …\nReturns a new PaginationStream.\npage_size is the pagination page size.\nrange_end is the upper bound on the requested range [key, …\nTracks regions in memory.\nTracks the operating(i.e., creating, opening, dropping) …\nReturns true if the keeper contains a (<code>datanoe_id</code>, …\nReturns a set of filtered out regions that are opening.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns opening region info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns number of element in tracking set.\nReturns [OpeningRegionGuard] if Region(<code>region_id</code>) on Peer(…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate flow\nDrop flow\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>table_info</code>’s table_id.\nSort the columns in CreateTableExpr and RawTableInfo.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA request to migrate region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCast the protobuf <code>ProcedureId</code> to common <code>ProcedureId</code>.\nCast the common <code>ProcedureId</code> to protobuf <code>ProcedureId</code>.\nCast the common <code>ProcedureState</code> to pb <code>ProcedureStateResponse</code>…\nSets <code>status</code> to the provided enum value.\nReturns the enum value of <code>status</code>, or the default if the …\nThe following cases in which the Region will be downgraded.\nBuilder for <code>RegionRoute</code>.\nError type for RegionRouteBuilder\nThe Status of the Region. TODO(dennis): It’s better to …\nUninitialized field\nCustom validation error\nBuilds a new <code>RegionRoute</code>.\nReturns the HashMap&lt;RegionNumber, &amp;Peer&gt;;\nReturns the HashMap&lt;RegionNumber, RegionStatus&gt;;\nReturns the HashMap&lt;RegionNumber, HashSet&gt;\nCreate an empty builder, with all fields set to <code>None</code> or …\nMarks the Leader Region as downgraded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the Leader Region is downgraded.\nReturns how long since the leader is in <code>Downgraded</code> status.\nThe start time when the leader is in <code>Downgraded</code> status.\nThe start time when the leader is in <code>Downgraded</code> status.\nThe start time when the leader is in <code>Downgraded</code> status.\n<code>None</code> by default.\n<code>None</code> by default.\n<code>None</code> by default.\nReturns the operating leader regions with corresponding …\nSets the leader status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkey is the first key for the range, If range_end is not …\nkey is the key, in bytes, to put into the key-value store.\nkey is the key, in bytes, to put into the key-value store.\nkey is the first key to delete in the range.\nkeys_only when set returns only the keys and not the …\nlimit is a limit on the number of keys returned for the …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pairs …\nIf prev_kv is set, gets the previous key-value pairs …\nIf prev_kv is set, gets the previous key-value pairs …\nReturns the <code>RangeBounds</code>.\nReturns the <code>RangeBounds</code>.\nrange_end is the upper bound on the requested range [key, …\nrange_end is the key following the last key to delete for …\nvalue is the value, in bytes, to associate with the key in …\nvalue is the value, in bytes, to associate with the key in …\nexpect is the previous value, in bytes\nkey is the first key for the range, If range_end is not …\nkey is the key, in bytes, to put into the key-value store.\nkey is the key, in bytes, to put into the key-value store.\nkey is the first key to delete in the range. If range_end …\nSets <code>keys</code>.\nkeys_only when set returns only the keys and not the …\nlimit is a limit on the number of keys returned for the …\nGets all keys prefixed with key. range_end is the key plus …\nDeletes all keys prefixed with key. range_end is one bit …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pair before …\nIf prev_kv is set, gets the previous key-value pairs …\nkey is the first key for the range, If range_end is not …\nkey is the first key to delete in the range.\nvalue is the value, in bytes, to associate with the key in …\nvalue is the value, in bytes, to associate with the key in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the <code>next</code> value directly if it is in the <code>range</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>max_value_size</code>. <code>None</code> stands for no limit.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA mock struct implements Datanode.\nA mock struct implements [DatanodeManager].\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a test purpose DdlContext.\nReturns a test purpose DdlContext with a specified …\nGet next prefix key of <code>key</code>.\nGet prefix end key of <code>key</code>.\nAllocates wal options in region granularity.\nArc wrapper of WalOptionsAllocator.\nAllocates a wal options for a region.\nAllocates a batch of wal options where each wal options …\nAllocates a wal options for each region. The allocated wal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a WalOptionsAllocator.\nInserts wal options into options.\nTries to start the allocator.\nManages topic initialization and selection.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new topic manager.\nSelects one topic from the topic pool through the topic …\nSelects a batch of topics from the topic pool through the …\nTries to initialize the topic manager. The initializer …\nTries to create topics specified by indexes in …\nA topic selector with the round-robin strategy, i.e. …\nControls topic selection.\nArc wrapper of TopicSelector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSelects a topic from the topic pool.")