searchState.loadedDescShard("store_api", 0, "Storage related APIs\nLogStore APIs.\nmetadata service\nMetadata of region and column.\nConstants used in metric engine.\nOption keys for the mito engine. We define them in this …\nPath constants for table engines, cluster states and WAL\nRegion Engine’s definition\nStorage APIs.\nThis trait represents a common data source abstraction …\nRetrieves a stream of record batches based on the provided …\nThe response of an <code>append_batch</code> operation.\nThe response of an <code>append</code> operation.\n<code>LogStore</code> serves as a Write-Ahead-Log for storage engine.\nAppends an entry to the log store and returns a response …\nAppends a batch of entries and returns a response …\nCreates a new <code>Namespace</code> from the given ref.\nDeletes an existing <code>Namespace</code> specified by the given ref.\nMakes an entry instance of the associated Entry type\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe id of the entry appended to the log store.\nKey: region id (as u64). Value: the id of the last …\nLists all existing namespaces.\nMakes a namespace instance of the associated Namespace type\nMarks all entries with ids <code>&lt;=entry_id</code> of the given …\nCreates a new <code>EntryStream</code> to asynchronously generates <code>Entry</code>…\nStops components of the logstore.\nEntry is the minimal data storage unit through which users …\nAn entry’s id. Different log store implementations may …\nReturns the contained data of the entry.\nComputes the estimated size in bytes of the entry.\nReturns the id of the entry. Usually the namespace id is …\nReturns the namespace of the entry.\nThe namespace id. Usually the namespace id is identical …\nReturns the namespace id.\nThe checkpoint by checkpoint\nManifest service\nThe action to alter metadata\nCommon actions for manifest\nDecode self from byte slice with reader protocol version, …\nDecode self from byte slice with reader protocol version, …\nDelete logs in [start, end) and ignore checkpoints.\nDelete all logs and checkpoints, and remove the manifest …\nDelete the checkpoint by version\nDelete logs and checkpoints which version is less than …\nDo a checkpoint, it will create a checkpoint and compact …\nEncode this action into a byte vector\nEncode this checkpoint into a byte vector\nReturns the last success checkpoint\nThe last compacted action’s version of checkpoint\nReturns the last(or latest) manifest version.\nLoad the checkpoint by version\nLoad the latest checkpoint\nSave a log\nSave a checkpoint.\nScan the logs in [start, end)\nScan actions which version in range [start, end)\nSet previous valid manifest version.\nSet a protocol action into meta action\nSet a protocol action into checkpoint\nStart the service\nStop the service\nUpdate metadata by the action\nProtocol action that used to block older clients from …\nCurrent reader and writer versions TODO(dennis): …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum protocol version we are currently allowed to …\nDelete logs in [start, end) and ignore checkpoints.\nDelete all logs and checkpoints, and remove the manifest …\nDelete the checkpoint by version\nDelete logs and checkpoints which version is less than …\nLoad the checkpoint by version\nLoad the latest checkpoint\nSave a log\nSave a checkpoint.\nScan the logs in [start, end)\nSNAFU context selector for the …\nMetadata of a column.\nSNAFU context selector for the …\nContains the error value\nSNAFU context selector for the <code>MetadataError::InvalidMeta</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>MetadataError::InvalidSchema</code>…\nContains the success value\nGeneral static metadata of a region.\nBuilder to build RegionMetadata.\nSNAFU context selector for the <code>MetadataError::SchemaProject</code>…\nSNAFU context selector for the <code>MetadataError::SerdeJson</code> …\nFields skipped in serialization.\nSNAFU context selector for the …\nAdds columns to the metadata if not exist.\nApplies the alter <code>kind</code> to the builder.\nConsumes the builder and build a RegionMetadata.\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nIncreases the schema version by 1.\nChanges columns type to the metadata if exist.\nFind column by id.\nFinds a column by name.\nImmutable and unique id of a region.\nFind column index by id.\nFind column index by name.\nColumns in the region. Has the same order as columns in …\nSchema of this column. Is the same as <code>column_schema</code> in …\nDecodes a JSON byte vector into a vector of <code>ColumnMetadata</code>.\nDrops columns from the metadata if exist.\nEncodes a vector of <code>ColumnMetadata</code> into a JSON byte vector.\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns all field columns before projection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a builder from existing RegionMetadata.\nDecode the metadata from a JSON str.\nMap column id to column’s index in column_metadatas.\nMap column id to column’s index in column_metadatas.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new builder.\nConstructs skipped fields from <code>column_metadatas</code>.\nSets the primary key of the region.\nMaintains an ordered list of primary keys\nReturns all primary key columns.\nReturns a column’s index in primary key if it is a …\nProject the metadata to a new one using specified column …\nPushes a new column metadata to this region’s metadata.\nImmutable and unique id of a region.\nLast schema.\nLatest schema constructed from column_metadatas.\nCurrent version of the region schema.\nSemantic type of this column (e.g. tag or timestamp).\nId of the time index column.\nId of the time index column.\nReturns the time index column\nReturns the arrow field of the time index column.\nEncode the metadata to a JSON string.\nConstruct <code>Self</code> from protobuf struct RegionColumnDef\nChecks whether the metadata is valid.\nChecks whether it is a valid column.\nHashMap key to be used in the region server’s extension …\nColumn name of internal column <code>__metric</code> that stores the …\nMetadata key present in the <code>CREATE TABLE ... WITH ()</code> …\nregion group value for data region inside a metric region\nregion group value for metadata region inside a metric …\nMetadata key present in the <code>CREATE TABLE ... WITH ()</code> …\nReturns true if the <code>key</code> is a valid option key for the mito …\nCluster state dir\nData dir for table engines\nAll paths relative to data_home(file storage) or root …\nGenerate region name in the form of “{TABLE_ID}_…\nThe result of setting readonly for the region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves region’s metadata.\nHandles substrait query and return a stream of record …\nHandles non-query request to the region. Returns the count …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of this engine\nRetrieves region’s disk usage.\nIndicates region role.\nSets readonly for a region gracefully.\nSets writable mode for a region.\nStops the engine\nReturns a SetReadonlyResponse::Success with the …\nReturns <code>last_entry_id</code> of the region if available(e.g., It…\nAdds a column.\nLocation to add a column.\nAdd columns to the region.\nAdd the column after specific column.\nKind of the alteration.\nChange a column’s datatype.\nChange columns datatype form the region, only fields are …\nDrop columns from the region, only fields are allowed to …\nAdd the column to the first position of columns.\nAlter metadata of a region.\nCatchup region request.\nClose region request.\nRequest to delete data from a region.\nOpen region request.\nRequest to put data into a region.\nTruncate region request.\nMetadata of the column to add.\nColumns in this region.\nSchema of the column to modify.\nRegion engine name\nRegion engine name\nThe <code>entry_id</code> that was expected to reply to. <code>None</code> stands …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind of alteration to do.\nLocation to add the column. If location is None, the …\nReturns true if we need to apply the request to the region.\nReturns true if we need to apply the alteration to the …\nReturns true if no column to add to the region.\nReturns true if no column’s datatype to change to the …\nOptions of the created region.\nOptions of the opened region.\nColumns in the primary key.\nDirectory for region’s data home. Usually is composed by …\nData directory of the region.\nReturns the type name of the request.\nRows to put.\nKeys to rows to delete.\nThe version of the schema before applying the alteration.\nSets it to writable if it’s available after it has …\nTo skip replaying the WAL.\nColumn will be changed to this type.\nConvert Body to a group of RegionRequest with region id. …\nChecks whether the request is valid, returns an error if …\nChecks whether the request is valid, returns an error if …\nReturns an error if the alter kind is invalid.\nReturns an error if the column to add is invalid.\nReturns an error if the column’s datatype to change is …\nReturns an error if the column to drop is invalid.\nAdd the column after this column.\nColumns to add.\nColumns to change.\nName of columns to drop.\nColumn’s default constraint.\nA ColumnDescriptor contains information to create a column.\nBuilder for <code>ColumnDescriptor</code>.\nError type for ColumnDescriptorBuilder\nId of column. Unique in each region.\nSchema of a column, used as an immutable struct.\nInitial version of the schema.\nThe max valid region sequence number.\nGroup number of one region. Unique in each region.\nId of the region. It’s generated by concatenating table …\nId of regions under the same table. Unique in each table. …\nSequence number of region inside one table. Unique in each …\nA common schema, should be immutable.\nRepresents a sequence number of data in storage. The …\nId of table. Universal unique.\nUninitialized field\nCustom validation error\nAdd key value pair to metadata.\nConvert this type as arrow::datatypes::DataType.\nTry to cast data type as a <code>DurationType</code>.\nTry to cast the type as a <code>ListType</code>.\nTry to cast data type as a <code>TimeType</code>.\nTry to cast data type as a <code>TimestampType</code>.\nChecks if the data type can cast to another data type.\nRetrieve the column comment\nRetrieve the column’s name by index\nConstants.\nCreates a default value for this column.\nCreate a default value for given <code>data_type</code>.\nCreates a vector with default value for this column.\nCreate a vector that contains <code>num_rows</code> default values for …\nCreates a vector for padding.\nCreates a mutable vector with given <code>capacity</code> of this type.\nDefault constraint of column, default is None, which means …\nDefault constraint of column, default is None, which means …\nReturns the default value of this type.\nCreates a [Duration(DurationMicrosecondType)] datatype.\nCreates a [Duration(DurationMillisecondType)] datatype.\nCreates a [Duration(DurationNanosecondType)] datatype.\nCreates a [Duration(DurationSecondType)] datatype.\nFilters pushed down\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts from arrow timestamp unit to\nConvert arrow data type to ConcreteDataType.\nCreates a [Interval(IntervalDayTimeType)] datatype.\nCreates a [Interval(IntervalMonthDayNanoType)] datatype.\nCreates a [Interval(IntervalYearMonthType)] datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs column nullable, default is true.\nIs column nullable, default is true.\nIs time index column, default is true.\nIs time index column, default is true.\nlimit can be used to reduce the amount scanned from the …\nReturns id of the Logical data type.\nName of this data type.\nCreate a schema from a vector of ColumnSchema.\nReturns a default null constraint.\nTry to get numeric precision, returns <code>None</code> if it’s not …\nTry to get numeric scale, returns <code>None</code> if it’s float or …\nExpected output ordering. This is only a hint and isn’t …\nIndices of columns to read, <code>None</code> to read all columns. This …\nSet the nullability to <code>true</code> of the column. Similar to …\nSet the <code>is_time_index</code> to <code>true</code> of the column. Similar to …\nReturns the time data type with <code>TimeUnit</code>.\nCreates a [Time(TimeMicrosecond)] datatype.\nCreates a [Time(TimeMillisecondType)] datatype.\nCreates a [Time(TimeNanosecond)] datatype.\nCreates a [Time(TimeSecondType)] datatype.\nReturns index of the timestamp key column.\nCasts the value to specific DataType. Return None if cast …\nTry to Create a schema from a vector of ColumnSchema.\nGenerate a new projected schema\nCommon types.\nCheck whether the constraint is valid for columns with …\nSet default constraint.\nCreates a new <code>ColumnSchema</code> with given metadata.\nSet the nullablity to <code>true</code> of the column. Similar to …\nInternal Column Name\nName for reserved column: op_type\nName for reserved column: primary_key\nColumn id reserved by the engine.\nName for reserved column: sequence\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the column id is reserved.\nId for <code>__op_type</code> column.\nId for <code>__sequence</code> column.\nId for storing logical table id column.\nId for storing TSID column.\nColumn id for version column. Version column is a special …\nA ColumnDescriptor contains information to create a column.\nBuilder for <code>ColumnDescriptor</code>.\nError type for ColumnDescriptorBuilder\nId of column. Unique in each region.\nThe max valid region sequence number.\nGroup number of one region. Unique in each region.\nId of the region. It’s generated by concatenating table …\nId of regions under the same table. Unique in each table. …\nSequence number of region inside one table. Unique in each …\nId of table. Universal unique.\nUninitialized field\nCustom validation error\nReturns the region id as u64.\nBuilds a new <code>ColumnDescriptor</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nDefault constraint of column, default is None, which means …\nDefault constraint of column, default is None, which means …\nDefault constraint of column, default is None, which means …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new RegionId from u64.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs column nullable, default is true.\nIs column nullable, default is true.\nIs column nullable, default is true.\nIs time index column, default is true.\nIs time index column, default is true.\nIs time index column, default is true.\nConstruct a new RegionId from table id and region number.\nReturns the group number of the region\nReturns the region number of the region.\nReturn the sequence number of the region\nReturns the table id of the region.\nConvert ColumnDescriptor to ColumnSchema. Fields not in …\nConstruct a new RegionId from table id, region group and …\nFilters pushed down\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nlimit can be used to reduce the amount scanned from the …\nExpected output ordering. This is only a hint and isn’t …\nIndices of columns to read, <code>None</code> to read all columns. This …\nRepresents a sequence number of data in storage. The …")