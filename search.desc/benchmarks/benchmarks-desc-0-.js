searchState.loadedDescShard("benchmarks", 0, "Logstore label.\nCounters of bytes of each operation on a logstore.\nCounter of bytes of the read operation.\nCounter of bytes of the append_batch operation.\nOperation type label.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBenchmarker config.\nThe region used for wal benchmarker.\nThe wal provider.\nScrapes the region and adds the generated entry to wal.\nThe exponential backoff rate of the kafka consumer. The …\nThe deadline of backoff. The backoff ends if the total …\nThe initial backoff delay of the kafka consumer.\nThe maximum backoff delay of the kafka consumer.\nThe advertised addresses of the kafka brokers. If there’…\nThe provided configuration file. The example configuration …\nThe column types of the schema for each region. Currently, …\nThe client-side compression algorithm for kafka records.\nComputes the estimated size in bytes of the entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum latency the kafka client issues a batch of …\nThe maximum size of a batch of kafka records. The default …\nCreates a new region.\nThe number of regions.\nThe number of rows in each wal entry. Each time a region …\nThe number of times each region is scraped.\nThe number of kafka topics to be created.\nThe number of workers each running in a dedicated thread.\nRandomly generates topic names if set to true. Useful when …\nReplays the region.\nLogs out the gathered prometheus metrics when the …\nThe seed of random number generators.\nSkips the read phase, aka. region replay, if set to true.\nSkips the write phase if set to true.\nThe wal provider.")