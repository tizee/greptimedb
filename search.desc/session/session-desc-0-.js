searchState.loadedDescShard("session", 0, "Session for persistent connection such as MySQL, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilder for <code>QueryContext</code>.\nError type for QueryContextBuilder\nUninitialized field\nCustom validation error\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault to double quote and fallback to back quote\nSQL like <code>set variable</code> may change timezone or other info in …\nSNAFU context selector for the <code>Error::InvalidConfigValue</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts maybe fully-qualified table name (…\nParse table name into <code>(catalog, schema, table)</code> with query …")