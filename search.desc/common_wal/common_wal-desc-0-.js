searchState.loadedDescShard("common_wal", 0, "The type of the topic selector, i.e. with which strategy …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWal configurations for datanode.\nWal configurations for metasrv.\nWal configurations for standalone.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBackoff configurations for kafka clients.\nThe exponential backoff rate, i.e. next backoff = base * …\nThe deadline of retries. <code>None</code> stands for no deadline.\nReturns the argument unchanged.\nThe initial backoff delay.\nCalls <code>U::from(self)</code>.\nThe maximum backoff delay.\nKafka wal configurations for datanode.\nThe backoff config.\nThe broker endpoints of the Kafka cluster.\nThe compression algorithm used to compress kafka records.\nThe consumer wait timeout.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe linger duration of a kafka batch producer.\nThe max size of a single producer batch.\nKafka wal configurations for metasrv.\nThe backoff config.\nThe broker endpoints of the Kafka cluster.\nThe timeout of topic creation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of partitions per topic.\nThe number of topics to be created upon start.\nThe replication factor of each topic.\nThe type of the topic selector with which to select a …\nTopic name prefix.\nKafka wal configurations for standalone.\nThe backoff config.\nThe broker endpoints of the Kafka cluster.\nThe compression algorithm used to compress kafka records.\nThe consumer wait timeout.\nThe timeout of topic creation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe linger duration of a kafka batch producer.\nThe max size of a single producer batch.\nNumber of partitions per topic.\nNumber of topics to be created upon start.\nThe replication factor of each topic.\nThe type of the topic selector with which to select a …\nTopic name prefix.\nConfigurations for raft-engine wal.\nWal directory\nWhether to reuse logically truncated log files.\nWal file size in bytes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether to pre-create log files on start up\nPurge interval in seconds\nWal purge threshold in bytes\nRead batch size\nDuration for fsyncing log files.\nWhether to sync log file after every write\nSNAFU context selector for the <code>Error::EndpointIPV4NotFound</code> …\nContains the error value\nContains the success value\nSNAFU context selector for the <code>Error::ResolveEndpoint</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn encoded wal options will be wrapped into a …\nWal options allocated to a region. A wal options is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKafka wal options allocated to a region.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKafka wal topic.")