searchState.loadedDescShard("catalog", 0, "Hook called after system table opening.\nRegister system table request:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the table by catalog, schema and table name.\nReturns all tables with a stream by catalog and schema.\nSNAFU context selector for the <code>Error::CatalogNotFound</code> …\nSNAFU context selector for the <code>Error::CompileScriptInternal</code>…\nSNAFU context selector for the <code>Error::CreateRecordBatch</code> …\nSNAFU context selector for the <code>Error::CreateSystemCatalog</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::Datafusion</code> variant\nSNAFU context selector for the <code>Error::EmptyValue</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FindPartitions</code> …\nSNAFU context selector for the <code>Error::FindRegionRoutes</code> …\nSNAFU context selector for the <code>Error::Generic</code> variant\nSNAFU context selector for the <code>Error::GetTableCache</code> variant\nSNAFU context selector for the <code>Error::InsertCatalogRecord</code> …\nSNAFU context selector for the <code>Error::Internal</code> variant\nSNAFU context selector for the <code>Error::InvalidCatalogValue</code> …\nSNAFU context selector for the <code>Error::InvalidEntryType</code> …\nSNAFU context selector for the <code>Error::InvalidKey</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ListCatalogs</code> variant\nSNAFU context selector for the <code>Error::ListNodes</code> variant\nSNAFU context selector for the <code>Error::ListSchemas</code> variant\nSNAFU context selector for the <code>Error::ListTables</code> variant\nSNAFU context selector for the <code>Error::Metasrv</code> variant\nSNAFU context selector for the <code>Error::NotSupported</code> variant\nContains the success value\nSNAFU context selector for the <code>Error::OpenSystemCatalog</code> …\nSNAFU context selector for the <code>Error::OpenTable</code> variant\nSNAFU context selector for the <code>Error::ParallelOpenTable</code> …\nSNAFU context selector for the <code>Error::QueryAccessDenied</code> …\nSNAFU context selector for the <code>Error::ReadSystemCatalog</code> …\nSNAFU context selector for the <code>Error::SchemaExists</code> variant\nSNAFU context selector for the <code>Error::SchemaNotFound</code> …\nSNAFU context selector for the <code>Error::SystemCatalog</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::TableCacheNotGet</code> …\nSNAFU context selector for the <code>Error::TableEngineNotFound</code> …\nSNAFU context selector for the <code>Error::TableExists</code> variant\nSNAFU context selector for the <code>Error::TableMetadataManager</code> …\nSNAFU context selector for the <code>Error::TableNotExist</code> variant\nSNAFU context selector for the <code>Error::TableNotFound</code> variant\nSNAFU context selector for the <code>Error::TableSchemaMismatch</code> …\nSNAFU context selector for the <code>Error::Unimplemented</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ValueDeserialize</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>information_schema</code> tables info provider.\nAll table names in <code>information_schema</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the TableRef by table name.\nReturns table names in the order of table id.\nReturns a map of TableRef in information schema.\nThe <code>CLUSTER_INFO</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.cluster_info</code> virtual table\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.columns</code> virtual table\nThe virtual table implementation for …\nBuilds the <code>information_schema.KEY_COLUMN_USAGE</code> table row …\nPrimary key constraint name\nTime index constraint name\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.KEY_COLUMN_USAGE</code> virtual …\nA memory table with specified schema and columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.{table_name}</code> virtual table\nCreates a memory table with table id, name, schema and …\nFind the schema and columns by the table_name, only valid …\nThe region id\nThe <code>PARTITIONS</code> table provides information about …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.partitions</code> virtual table\nPredicate to filter <code>information_schema</code> tables stream, we …\nA list of predicate\nEvaluate the predicates with the row. returns true when …\nEvaluate the predicate with the row, returns:\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create a predicate from datafusion [<code>Expr</code>], return …\nTry its best to create predicates from <code>ScanRequest</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when the values are all <code>DfExpr::Literal</code>.\nPerform SQL left LIKE right, return <code>None</code> if fail to …\nThe <code>REGION_PEERS</code> table provides information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.region_peers</code> virtual table\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>information_schema.schemata</code> table implementation.\nBuilds the <code>information_schema.schemata</code> table row by row\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.schemata</code> virtual table\nThe <code>TABLE_CONSTRAINTS</code> table describes which tables have …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.table_constraints</code> virtual …\nAll table names in <code>information_schema</code>.\nBuilds the <code>information_schema.TABLE</code> table row by row\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct the <code>information_schema.tables</code> virtual table\nTry to get the <code>[MetaClient]</code> from <code>[CatalogManager]</code> weak …\nTry to get the server running mode from <code>[CatalogManager]</code> …\nA wrapper of <code>MetaKvBackend</code> with cache support.\nAccess all existing catalog, schema and tables.\nA sub-CatalogManager that handles system tables\nA wrapper of <code>MetaKvBackend</code> with cache support.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess all existing catalog, schema and tables.\nExisting system tables:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>[MetaClient]</code>.\nReturns the server running mode.\nA sub-CatalogManager that handles system tables\nSimple in-memory list of catalogs\nCollection of catalogs containing schemas and ultimately …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a memory catalog list contains a numbers table for …\nRegisters a catalog if it does not exist and returns false …\nRegisters a schema if it does not exist. It returns an …\nRegisters a schema and returns an error if the catalog or …\nCreates a manager with some default setups (e.g. default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")