searchState.loadedDescShard("log_store", 0, "A noop log store which only for test\nSNAFU context selector for the <code>Error::AddEntryLogBatch</code> …\nSNAFU context selector for the <code>Error::BuildClient</code> variant\nSNAFU context selector for the <code>Error::BuildPartitionClient</code> …\nSNAFU context selector for the <code>Error::Cast</code> variant\nSNAFU context selector for the <code>Error::ConsumeRecord</code> variant\nSNAFU context selector for the <code>Error::DecodeJson</code> variant\nSNAFU context selector for the <code>Error::DiscontinuousLogIndex</code>…\nSNAFU context selector for the <code>Error::EmptyEntries</code> variant\nSNAFU context selector for the <code>Error::EncodeJson</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FetchEntry</code> variant\nSNAFU context selector for the <code>Error::GetClient</code> variant\nSNAFU context selector for the <code>Error::GetOffset</code> variant\nSNAFU context selector for the <code>Error::IllegalNamespace</code> …\nSNAFU context selector for the <code>Error::IllegalSequence</code> …\nSNAFU context selector for the <code>Error::IllegalState</code> variant\nSNAFU context selector for the <code>Error::Io</code> variant\nSNAFU context selector for the <code>Error::MissingKey</code> variant\nSNAFU context selector for the <code>Error::MissingValue</code> variant\nContains the success value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ProduceRecord</code> variant\nSNAFU context selector for the <code>Error::RaftEngine</code> variant\nSNAFU context selector for the <code>Error::ResolveKafkaEndpoint</code> …\nSNAFU context selector for the <code>Error::StartGcTask</code> variant\nSNAFU context selector for the <code>Error::StopGcTask</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKafka Entry implementation.\nKafka Namespace implementation.\nEntry payload.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe logical entry id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe namespace used to identify and isolate log entries …\nA client through which to contact Kafka cluster. Each …\nManages client construction and accesses.\nArc wrapper of ClientManager.\nTop-level client in kafka. All clients are constructed by …\nA pool maintaining a collection of clients. Key: a topic. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the client associated with the topic. If the client …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a Client from the raw client.\nA producer used to buffer log entries for a specific topic …\nA raw client used to construct a batch producer and/or a …\nTries to create a ClientManager.\nA log store backed by Kafka.\nAppends an entry to the log store and returns a response …\nAppends a batch of entries and returns a response …\nManages kafka clients through which the log store contact …\nCreates a new <code>Namespace</code> from the given ref.\nDeletes an existing <code>Namespace</code> specified by the given ref.\nCreates an entry of the associated Entry type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLists all existing namespaces.\nCreates a namespace of the associated Namespace type.\nMarks all entries with ids <code>&lt;=entry_id</code> of the given …\nCreates a new <code>EntryStream</code> to asynchronously generates <code>Entry</code>…\nStops components of the logstore.\nTries to create a Kafka log store.\nA wrapper of kafka offset.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe estimated size in bytes of a serialized RecordMeta. A …\nThe record contains the first part of an entry’s data.\nThe record is self-contained, i.e. an entry’s data is …\nThe record contains the last part of an entry’s data.\nThe record contains one of the middle parts of an entry’…\nThe minimal storage unit in the Kafka log store.\nThe metadata of a record.\nProduces a record to a kafka topic.\nThe type of a record.\nThe current version of Record.\nThe payload of the record.\nEntries are buffered before being built into a record.\nThe id of the entry the record associated with.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe metadata of the record.\nCreates a new producer for producing entries with the …\nThe namespace of the entries.\nThe namespace of the entry the record associated with.\nProduces the buffered entries to Kafka sever. Those …\nPushes an entry into the entry buffer.\nThe type of the record.\nThe version of the record. Used for backward compatibility.\nPopulates the entry buffer with the given entries.\nLogstore label.\nCounter of bytes of the append_batch operation on the …\nCounter of calls of the append_batch operation on the …\nTimer of the append_batch operation on the kafka logstore.\nCounter of bytes of the records produced by the kafka …\nCounter of the numbers of the records produced by the …\nCounter of bytes of the read operation on the kafka …\nCounter of calls of the read operation on the kafka …\nTimer of the append_batch operation on the kafka logstore. …\nCounter of bytes of the records read by the kafka logstore.\nCounters of bytes of each operation on a logstore.\nCounters of calls of each operation on a logstore.\nTimer of operations on a logstore.\nCounter of bytes of the append_batch operation on the …\nCounter of calls of the append_batch operation on the …\nTimer of the append_batch operation on the raft-engine …\nCounter of bytes of the read operation on the raft-engine …\nCounter of calls of the read operation on the raft-engine …\nTimer of the append_batch operation on the raft-engine …\nOperation type label.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA noop log store which only for test\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRaftEngine based KvBackend implementation.\nKvBackend implementation based on raft_engine::Engine.\nCompress a log batch if its size exceeds this value. …\nDeprecated. Incrementally sync log files after specified …\nAcceleration factor for LZ4 compression. It can be fine …\nMain directory to store log files. Will create on startup …\nWhether to recycle stale log files. If <code>true</code>, logically …\nVersion of the log file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum memory bytes allowed for the in-memory index. …\nWhether to prepare log files for recycling when start. If …\nMaximum capacity for preparing log files for recycling …\nPurge rewrite log queue if its garbage ratio exceeds this …\nPurge rewrite log queue if its size exceeds this value.\nPurge append log queue if its size exceeds this value.\nHow to deal with file corruption during recovery.\nMinimum I/O size for reading log files during recovery.\nThe number of threads used to scan and recovery log files.\nAuxiliary directory to store log files. Will create on …\nTarget file size for rotating log files.\nRaftEngine based KvBackend implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppends an entry to logstore. Currently the existence of …\nAppends a batch of entries to logstore. <code>RaftEngineLogStore</code> …\nConverts entries to <code>LogBatch</code> and checks if entry ids are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a stream of entries from logstore in the given …\nGenerated file from <code>logstore.proto</code>\nGenerated files are compatible only with the same version …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a write log for the provided path, used for test.")