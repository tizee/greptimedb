searchState.loadedDescShard("cmd", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLog the versions of the application, and the arguments …\nA hook for implementor to make something happened before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the parsed command from the user (which may be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCorresponding to <code>SHOW CREATE TABLE</code>\nCorresponding to <code>EXPORT TABLE</code>\nServer address to connect\nbasic authentication for connecting to the server\nThe name of the catalog to export.\nParallelism of the export.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of <code>TableReference</code> to be exported. Includes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all db names.\nMax retry times for each job.\nDirectory to put the exported data. E.g.: …\nSplit at <code>-</code>.\nExecute one single sql query.\nThings to export\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pattern of a valid catalog, schema or table name.\nTable global info contains necessary info for a datanode …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nId of datanode that created the global table info kv. only …\nAllocation of region ids across all datanodes.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidCatalog</code> …\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSNAFU context selector for the <code>Error::BuildMetaServer</code> …\nSNAFU context selector for the <code>Error::BuildRuntime</code> variant\nSNAFU context selector for the <code>Error::CollectRecordBatches</code> …\nSNAFU context selector for the <code>Error::ConnectEtcd</code> variant\nSNAFU context selector for the <code>Error::ConnectServer</code> variant\nSNAFU context selector for the <code>Error::CreateDir</code> variant\nSNAFU context selector for the <code>Error::EmptyResult</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FileIo</code> variant\nSNAFU context selector for the <code>Error::HttpQuerySql</code> variant\nSNAFU context selector for the <code>Error::IllegalConfig</code> variant\nSNAFU context selector for the <code>Error::InitDdlManager</code> …\nSNAFU context selector for the <code>Error::InitMetadata</code> variant\nSNAFU context selector for the <code>Error::InitTimezone</code> variant\nSNAFU context selector for the <code>Error::InvalidDatabaseName</code> …\nSNAFU context selector for the <code>Error::InvalidReplCommand</code> …\nSNAFU context selector for the <code>Error::IterStream</code> variant\nSNAFU context selector for the <code>Error::LoadLayeredConfig</code> …\nSNAFU context selector for the <code>Error::MissingConfig</code> variant\nSNAFU context selector for the <code>Error::NotDataFromOutput</code> …\nContains the success value\nSNAFU context selector for the <code>Error::Other</code> variant\nSNAFU context selector for the <code>Error::ParseSql</code> variant\nSNAFU context selector for the <code>Error::PlanStatement</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Readline</code> variant\nSNAFU context selector for the <code>Error::ReplCreation</code> variant\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::ShutdownDatanode</code> …\nSNAFU context selector for the <code>Error::ShutdownFrontend</code> …\nSNAFU context selector for the <code>Error::ShutdownMetaServer</code> …\nSNAFU context selector for the <code>Error::StartCatalogManager</code> …\nSNAFU context selector for the <code>Error::StartDatanode</code> variant\nSNAFU context selector for the <code>Error::StartFrontend</code> variant\nSNAFU context selector for the <code>Error::StartMetaClient</code> …\nSNAFU context selector for the <code>Error::StartMetaServer</code> …\nSNAFU context selector for the <code>Error::StartProcedureManager</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::StopProcedureManager</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe working home directory of this metasrv instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe max operations per txn\nIf it’s not empty, the metasrv will store all data with …\nOptions mixed up from datanode, frontend and metasrv.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the configuration from multiple sources and merge …\nThe working home directory of this standalone instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for different store engines.")