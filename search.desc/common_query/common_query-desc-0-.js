searchState.loadedDescShard("common_query", 0, "Represent nodes in the DataFusion Physical Plan.\nnew Output struct with output data(previously Output) and …\nOriginal Output struct carrying result data to …\nOutputMeta stores meta information produced/generated …\nReturns the execution plan as <code>Any</code> so that it can be …\nSpecifies whether the <code>ExecutionPlan</code> benefits from increased\nGet a list of children <code>ExecutionPlan</code>s that act as inputs …\nBegin execution of <code>partition</code>, returning a <code>Stream</code> of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>false</code> if this <code>ExecutionPlan</code>’s implementation may …\nReturn a snapshot of the set of <code>Metric</code>s for this …\nShort name for the ExecutionPlan, such as ‘ParquetExec’…\nMay exist for query output. One can retrieve execution …\nReturn properties of the output of the <code>ExecutionPlan</code>, such …\nIf supported, attempt to increase the partitioning of this …\nSpecifies the data distribution requirements for all the …\nSpecifies the ordering required for all of the children of …\nGet the schema for this execution plan\nSignature module contains foundational types that are used …\nReturns statistics for this <code>ExecutionPlan</code> node. If …\nReturns a new <code>ExecutionPlan</code> where all existing children …\nRepresents the result from an expression\nA single value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a columnar value into an VectorRef\nSNAFU context selector for the <code>Error::ArrowCompute</code> variant\nSNAFU context selector for the <code>Error::BadAccumulatorImpl</code> …\nSNAFU context selector for the <code>Error::ConvertArrowSchema</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::CreateAccumulator</code> …\nSNAFU context selector for the <code>Error::DowncastVector</code> …\nContains the error value\nSNAFU context selector for the <code>Error::ExecuteFunction</code> …\nSNAFU context selector for the <code>Error::ExecutePhysicalPlan</code> …\nSNAFU context selector for the <code>Error::ExecuteRepeatedly</code> …\nSNAFU context selector for the <code>Error::Execute</code> variant\nSNAFU context selector for the <code>Error::FromArrowArray</code> …\nSNAFU context selector for the <code>Error::FromScalarValue</code> …\nSNAFU context selector for the <code>Error::GeneralDataFusion</code> …\nSNAFU context selector for the <code>Error::GenerateFunction</code> …\nSNAFU context selector for the <code>Error::GetScalarVector</code> …\nSNAFU context selector for the <code>Error::IntoVector</code> variant\nSNAFU context selector for the <code>Error::InvalidFuncArgs</code> …\nSNAFU context selector for the <code>Error::InvalidInputCol</code> …\nSNAFU context selector for the <code>Error::InvalidInputState</code> …\nSNAFU context selector for the <code>Error::InvalidInputType</code> …\nSNAFU context selector for the …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PermissionDenied</code> …\nSNAFU context selector for the <code>Error::ProcedureService</code> …\nSNAFU context selector for the <code>Error::PyUdf</code> variant\nSNAFU context selector for the <code>Error::TableMutation</code> variant\nSNAFU context selector for the <code>Error::ThreadJoin</code> variant\nSNAFU context selector for the <code>Error::ToScalarValue</code> variant\nSNAFU context selector for the <code>Error::TypeCast</code> variant\nSNAFU context selector for the <code>Error::UdfTempRecordBatch</code> …\nSNAFU context selector for the …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate Accumulator with the data type of input columns.\nAccumulator creator that will be used by DataFusion\nA function’s return type\nScalar function\nThis signature corresponds to which types an aggregator …\ndecorates a function to handle <code>ScalarValue</code>s by converting …\nLogical representation of a user-defined aggregate …\nRepresents the call of an aggregate built-in function with …\nAn expression with a specific name.\nWhether an expression is between a given range.\nA binary expression such as “age &gt; 21”\nThe CASE expression is similar to a series of nested …\nCasts the expression to a given type and will return a …\nA named reference to a qualified filed in a schema.\n<code>Expr</code> is a central struct of DataFusion’s query API, and …\nEXISTS subquery\nCentral struct of query API. Represent logical expressions …\nReturns the field of a <code>arrow::array::ListArray</code> or …\nList of grouping set expressions. Only valid in the …\nReturns whether the list contains the expr value.\nIN subquery\nTrue if argument is  false, false otherwise. This …\nTrue if argument is TRUE OR NULL, false otherwise. This …\nTrue if argument is not NULL, false otherwise. This …\nTrue if argument is FALSE or NULL, false otherwise. This …\nTrue if argument is TRUE or FALSE, false otherwise. This …\nTrue if argument is NULL, false otherwise. This expression …\nTrue if argument is true, false otherwise. This expression …\nTrue if argument is NULL, false otherwise. This expression …\nLIKE expression\nA constant value.\narithmetic negation of an expression, the operand must be …\nNegation of an expression. The expression’s type must be …\nA place holder which hold a reference to a qualified field …\nA place holder for parameters in a prepared statement …\nRepresents the call of a scalar function with a set of …\nScalar subquery\nLogical representation of a UDF.\nA named reference to a variable in a registry.\nLIKE expression that uses regular expressions\nA sort expression, that can be used to sort values.\nCasts the expression to a given type and will return a …\nUnnest expression\nRepresents a reference to all available fields in a …\nRepresents the call of a window function with arguments.\nAccumulator module contains the trait definition for …\nactual implementation\nReturn <code>self AS name</code> alias expression\nEnsure <code>expr</code> has the name as <code>original_name</code> by adding an …\nReturn <code>self AS name</code> alias expression with a specific …\nReturn <code>self &amp;&amp; other</code>\nreturn <code>self BETWEEN low AND high</code>\nBuilds an <code>Expr</code> that filters timestamp column from given …\nReturns a full and complete string representation of this …\nWraps this expression in a cast to a target …\nReturn true when the expression contains out …\nCreates a new UDF with a specific signature and specific …\nthe creator that creates aggregate functions\nReturns the datatype and nullability of the expression …\nReturns the name of this expression as it should appear in …\nReturn <code>self == other</code>\nReturn access to the named field. Example <code>expr[&quot;name&quot;]</code>\nReturns the argument unchanged.\nactual implementation\nReturns the arrow::datatypes::DataType of the expression …\nReturn <code>self &gt; other</code>\nReturn <code>self &gt;= other</code>\nReturn <code>self ILIKE other</code>\nReturn <code>self IN &lt;list&gt;</code> if <code>negated</code> is false, otherwise …\nReturn access to the element field. Example <code>expr[&quot;name&quot;]</code>\nRecursively find all <code>Expr::Placeholder</code> expressions, and to …\nCalls <code>U::from(self)</code>.\nReturn <code>IsFalse(Box(self))</code>\nReturn <code>IsNotFalse(Box(self))</code>\nReturn `IsNotNull(Box(self))\nReturn <code>IsNotTrue(Box(self))</code>\nReturn <code>IsNotUnknown(Box(self))</code>\nReturn `IsNull(Box(self))\nReturn <code>IsTrue(Box(self))</code>\nReturn <code>IsUnknown(Box(self))</code>\nReturn <code>self LIKE other</code>\nReturn <code>self &lt; other</code>\nReturn <code>self &lt;= other</code>\nname\nname\nReturn the name to use for the specific Expr, recursing …\nreturn <code>self NOT BETWEEN low AND high</code>\nReturn <code>self != other</code>\nReturn <code>self NOT ILIKE other</code>\nReturn <code>self NOT LIKE other</code>\nReturns the nullability of the expression based on …\nReturn <code>self || other</code>\nReturn elements between <code>1</code> based <code>start</code> and <code>stop</code>, for …\nReturn type\nReturn type\nReturns true if some of this <code>exprs</code> subexpressions may not …\nsignature\nsignature\nCreate a sort expression from an existing expression.\nthe accumulator’s state’s description as a function of …\nReturn all referenced columns of this expression.\nReturns a arrow::datatypes::Field compatible with this …\nUdaf module contains functions and structs supporting …\nUdf module contains foundational types that are used to …\nRemove an alias from an expression if one exists.\nReturn String representation of the variant represented by …\nAn accumulator represents a stateful object that lives …\n<code>AggrFuncTypeStore</code> stores the aggregate function’s input …\nAn <code>AggregateFunctionCreator</code> dynamically creates <code>Accumulator</code>…\nA wrapper type for our Accumulator to DataFusion’s …\nCreate a function that can create a new accumulator with …\nreturns its value based on its current state.\nReturns the argument unchanged.\nGet the input data types of the Accumulator.\nCalls <code>U::from(self)</code>.\nupdates the accumulator’s state from a vector of states.\nGet the Accumulator’s output data type.\nStore the input data types that are provided by DataFusion …\nReturns the state of the accumulator at the end of the …\nGet the Accumulator’s state data types.\nupdates the accumulator’s state from a vector of arrays.\nRepresents the call of an aggregate built-in function with …\nAn expression with a specific name.\nWhether an expression is between a given range.\nA binary expression such as “age &gt; 21”\nThe CASE expression is similar to a series of nested …\nCasts the expression to a given type and will return a …\nA named reference to a qualified filed in a schema.\n<code>Expr</code> is a central struct of DataFusion’s query API, and …\nEXISTS subquery\nCentral struct of query API. Represent logical expressions …\nReturns the field of a <code>arrow::array::ListArray</code> or …\nList of grouping set expressions. Only valid in the …\nReturns whether the list contains the expr value.\nIN subquery\nTrue if argument is  false, false otherwise. This …\nTrue if argument is TRUE OR NULL, false otherwise. This …\nTrue if argument is not NULL, false otherwise. This …\nTrue if argument is FALSE or NULL, false otherwise. This …\nTrue if argument is TRUE or FALSE, false otherwise. This …\nTrue if argument is NULL, false otherwise. This expression …\nTrue if argument is true, false otherwise. This expression …\nTrue if argument is NULL, false otherwise. This expression …\nLIKE expression\nA constant value.\narithmetic negation of an expression, the operand must be …\nNegation of an expression. The expression’s type must be …\nA place holder which hold a reference to a qualified field …\nA place holder for parameters in a prepared statement …\nRepresents the call of a scalar function with a set of …\nScalar subquery\nA named reference to a variable in a registry.\nLIKE expression that uses regular expressions\nA sort expression, that can be used to sort values.\nCasts the expression to a given type and will return a …\nUnnest expression\nRepresents a reference to all available fields in a …\nRepresents the call of a window function with arguments.\nBuilds an <code>Expr</code> that filters timestamp column from given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a Timestamp to datafusion literal value.\nLogical representation of a user-defined aggregate …\nactual implementation\nthe creator that creates aggregate functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname\nCreate a new AggregateUDF\nReturn type\nsignature\nthe accumulator’s state’s description as a function of …\nLogical representation of a UDF.\nReturns the argument unchanged.\nReturns the argument unchanged.\nactual implementation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname\nCreate a new ScalarUdf\nReturn type\nsignature\nAllocate rows based on a hash of one of more expressions …\nOutput partitioning supported by <code>ExecutionPlan</code>s.\n<code>PhysicalPlan</code> represent nodes in the Physical Plan.\nAdapt DataFusion’s <code>ExecutionPlan</code> to GreptimeDB’s …\nAllocate batches using a round-robin algorithm and the …\nMain interface for executing queries with DataFusion. …\nTask Execution Context\nUnknown partitioning scheme with a known number of …\nReturns the physical plan as <code>Any</code> so that it can be …\nRetrieves a <code>CatalogProvider</code> instance by name\nRetrieves the list of available catalog names.\nGet a list of child physical plans that provide the input …\nReturn a copied version of config for this Session\nReturn a copied version of table options for this Session\nDeregisters the given table.\nDeregisters a UDAF within this context.\nDeregisters a UDF within this context.\nDeregisters a UDWF within this context.\nReturn the <code>enable_ident_normalization</code> of this Session\nCreates an RecordBatch stream.\nExecute the <code>LogicalPlan</code>, return a <code>DataFrame</code>. This API is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the <code>MemoryPool</code> associated with this TaskContext\nCreate a new <code>TaskContext</code> instance.\nCreates a new <code>SessionContext</code> using the default …\nCreates a new <code>SessionContext</code> using the provided …\nCreates a new <code>SessionContext</code> using the provided …\nCreates a new <code>SessionContext</code> using the provided …\nReturns the number of partitions in this partitioning …\nReturn properties of the output of the PhysicalPlan, such …\nCreates a <code>DataFrame</code> for reading an Arrow data source.\nCreates a <code>DataFrame</code> for reading an Avro data source.\nCreates a <code>DataFrame</code> for reading a <code>RecordBatch</code>\nCreate a <code>DataFrame</code> for reading a [<code>Vec[</code>RecordBatch<code>]</code>]\nCreates a <code>DataFrame</code> for reading a CSV data source.\nCreates an empty DataFrame.\nCreates a <code>DataFrame</code> for reading an JSON data source.\nCreates a <code>DataFrame</code> for reading a Parquet data source.\nCreates a <code>DataFrame</code> for a <code>TableProvider</code> such as a …\nFinds any <code>ListingSchemaProvider</code>s and instructs them to …\nRegisters an Arrow file as a table that can be referenced …\nRegisters an Avro file as a table that can be referenced …\nRegisters the <code>RecordBatch</code> as the specified table name\nRegisters a named catalog using a custom <code>CatalogProvider</code> …\nRegister <code>CatalogProviderList</code> in <code>SessionState</code>\nRegisters a CSV file as a table which can referenced from …\nRegisters a JSON file as a table that it can be referenced …\nRegisters a <code>ListingTable</code> that can assemble multiple files …\nRegisters a Parquet file as a table that can be referenced …\nRegisters a <code>TableProvider</code> as a table that can be …\nRegisters a <code>ConfigExtension</code> as a table option extention …\nRegisters an aggregate UDF within this context.\nRegisters a scalar UDF within this context.\nRegister a table UDF with this context\nRegisters a window UDF within this context.\nRegisters a variable provider within this context.\nReturn the RuntimeEnv associated with this TaskContext\nReturn the RuntimeEnv used to run queries with this …\nReturns true when the guarantees made by this <code>Partitioning</code> …\nGet the schema for this physical plan\nReturn the SessionConfig associated with this TaskContext\nReturn the <code>session_id</code> of this TaskContext\nReturns an id that uniquely identifies this <code>SessionContext</code>.\nReturns the time this <code>SessionContext</code> was created\nCreates a <code>DataFrame</code> from SQL query text.\nCreates a <code>DataFrame</code> from SQL query text, first validating …\nSnapshots the <code>SessionState</code> of this <code>SessionContext</code> setting …\nGet weak reference to <code>SessionState</code>\nRetrieves a <code>DataFrame</code> representing a table previously …\nReturn <code>true</code> if the specified table exists in the schema …\nReturn the <code>TableProviderFactory</code> that is registered for the …\nReturn a <code>TableProvider</code> for the specified table.\nGet a new TaskContext to run in this session\nReturn the <code>task_id</code> of this TaskContext\nCreates a new <code>SessionContext</code> using the provided …\nCreates a new <code>SessionContext</code> using the provided …\nRegisters a <code>FunctionFactory</code> to handle <code>CREATE FUNCTION</code> …\nReturns a new plan where all children were replaced by new …\nUpdate the <code>RuntimeEnv</code>\nUpdate the <code>SessionConfig</code>\nCreates a new <code>SessionContext</code> using the provided …\nExecutes a query and writes the results to a partitioned …\nExecutes a query and writes the results to a partitioned …\nExecutes a query and writes the results to a partitioned …\nCreate Accumulator with the data type of input columns.\nAccumulator creator that will be used by DataFusion\nfixed number of arguments of arbitrary types\nbinary\ntrue or false value\nDate stored as a signed 32bit int days since UNIX epoch …\nDate stored as a signed 64bit int milliseconds since UNIX …\n128bit decimal, using the i128 to represent the decimal, …\n256bit decimal, using the i256 to represent the decimal, …\nDictionary type: index type and value\nDuration in microseconds\nDuration in milliseconds\nDuration in nanoseconds\nDuration in seconds\nexact number of arguments of an exact type\nfixed size binary\nFixed size list scalar.\n32bit float\n64bit float\nDefault counter column name for OTLP metrics.\nDefault physical table name\nDefault timestamp column name for Prometheus metrics.\nDefault value column name for Prometheus metrics.\nAn immutable function will always return the same output …\nsigned 16bit int\nsigned 32bit int\nsigned 64bit int\nsigned 8bit int\nNumber of elapsed days and milliseconds (no leap seconds) …\nA triple of the number of elapsed months, days, and …\nNumber of elapsed whole months\nlarge binary\nThe array must be a LargeListArray with length 1.\nutf-8 encoded string representing a LargeString’s arrow …\nRepresents a single element of a <code>ListArray</code> as an <code>ArrayRef</code>\nrepresents <code>DataType::Null</code> (castable to/from any other type)\nOne of a list of signatures\nA function’s return type\nScalar function\nA dynamically typed, nullable single value.\nThe Signature of a function defines its supported input …\nA stable function may return different values given the …\nThis signature corresponds to which types an aggregator …\nRepresents a single element <code>StructArray</code> as an <code>ArrayRef</code>. See\nTime stored as a signed 32bit int as milliseconds since …\nTime stored as a signed 32bit int as seconds since midnight\nTime stored as a signed 64bit int as microseconds since …\nTime stored as a signed 64bit int as nanoseconds since …\nTimestamp Microseconds\nTimestamp Milliseconds\nTimestamp Nanoseconds\nTimestamp Second\nA function’s type signature, which defines the function…\nunsigned 16bit int\nunsigned 32bit int\nunsigned 64bit int\nunsigned 8bit int\nfixed number of arguments of an arbitrary but equal type …\nA nested datatype that can represent slots of differing …\nutf-8 encoded string.\narbitrary number of arguments of an common type out of a …\nOne or more arguments with arbitrary types\narbitrary number of arguments of an arbitrary but equal …\nA volatile function may change the return value from …\nA function’s volatility, which defines the functions …\nWrapping addition of <code>ScalarValue</code>\nChecked addition of <code>ScalarValue</code>\nany - Creates a signature which can a be made of any type …\nCalculate arithmetic negation for a scalar value\nTry to cast this value to a ScalarValue of type <code>data_type</code>\nRetrieve ScalarValue for each row in <code>array</code>\nreturn the <code>DataType</code> of this <code>ScalarValue</code>\nAbsolute distance between two numeric values (of the same …\nPerforms <code>lhs / rhs</code>\nCompares a single row of array @ index for equality with …\nexact - Creates a signature which must match the types in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for the <code>DataType</code> of the value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether this value is null or not.\nConverts an iterator of references <code>ScalarValue</code> into an …\ndecorates a function to handle <code>ScalarValue</code>s by converting …\nWrapping multiplication of <code>ScalarValue</code>\nChecked multiplication of <code>ScalarValue</code>\nnew - Creates a new Signature from any type signature and …\nReturns a <code>ScalarValue::IntervalDayTime</code> representing <code>days</code> …\nReturns a <code>ScalarValue::IntervalMonthDayNano</code> representing …\nReturns a <code>ScalarValue::IntervalYearMonth</code> representing <code>years</code>…\nConverts <code>Vec&lt;ScalarValue&gt;</code> where each element has type …\nConverts <code>Vec&lt;ScalarValue&gt;</code> where each element has type …\nConverts <code>IntoIterator&lt;Item = ScalarValue&gt;</code> where each …\nCreate a negative one value in the given type.\nCreate an one value in the given type.\nCreate a <code>Result&lt;ScalarValue&gt;</code> with the provided value and …\nReturns a <code>ScalarValue</code> representing <code>value</code> and <code>tz_opt</code> …\nReturns a <code>ScalarValue::Utf8</code> representing <code>val</code>\nCreate a zero value in the given type.\none_of Creates a signature which can match any of the …\nGet raw data (inner array) inside ScalarValue\nPerforms <code>lhs % rhs</code>\nEstimate size if bytes including <code>Self</code>. For values with …\nEstimates size of <code>HashSet</code> in bytes.\nEstimates size of <code>Vec</code> in bytes.\nEstimates size of <code>VecDeque</code> in bytes.\nWrapping subtraction of <code>ScalarValue</code>\nChecked subtraction of <code>ScalarValue</code>\nConverts a scalar value into an 1-row array.\nConverts a scalar value into an array of <code>size</code> rows.\nConverts a scalar into an arrow <code>Scalar</code> (which implements …\nCreate a Null instance of ScalarValue for this datatype\nCreate a Null instance of ScalarValue for this datatype\nConverts a value in <code>array</code> at <code>index</code> into a ScalarValue\nTry to parse <code>value</code> into a ScalarValue of type <code>target_type</code>\nCreate a decimal Scalar from value/precision and scale.\ntype_signature - The types that the function accepts. See …\nuniform - Creates a function with a fixed number of …\nvariadic - Creates a variadic signature that represents an …\nvariadic_any - Creates a variadic signature that …\nvariadic_equal - Creates a variadic signature that …\nvolatility - The volatility of the function. See Volatility…\nfixed number of arguments of arbitrary types\nexact number of arguments of an exact type\nAn immutable function will always return the same output …\nOne of a list of signatures\nThe Signature of a function defines its supported input …\nA stable function may return different values given the …\nA function’s type signature, which defines the function…\nfixed number of arguments of an arbitrary but equal type …\narbitrary number of arguments of an common type out of a …\nOne or more arguments with arbitrary types\narbitrary number of arguments of an arbitrary but equal …\nA volatile function may change the return value from …\nA function’s volatility, which defines the functions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntype_signature - The types that the function accepts. See …\nvolatility - The volatility of the function. See Volatility…")