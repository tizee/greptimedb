searchState.loadedDescShard("puffin", 0, "Format specification for Puffin files\nBlob metadata of Puffin\nBuilder for <code>BlobMetadata</code>.\nError type for BlobMetadataBuilder\nCompression codec used to compress the blob\nSingle LZ4 compression frame, with content size present\nUninitialized field\nCustom validation error\nSingle Zstandard compression frame, with content size …\nBlob type\nBlob type\nBlob type\nBuilds a new <code>BlobMetadata</code>.\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nSee <code>CompressionCodec</code>. If omitted, the data is assumed to …\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor Iceberg, it’ list of field IDs the blob was computed …\nFor Iceberg, it’ list of field IDs the blob was computed …\nFor Iceberg, it’ list of field IDs the blob was computed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the blob stored in the file (after …\nThe length of the blob stored in the file (after …\nThe length of the blob stored in the file (after …\nThe offset in the file where the blob contents start\nThe offset in the file where the blob contents start\nThe offset in the file where the blob contents start\nStorage for arbitrary meta-information about the blob\nStorage for arbitrary meta-information about the blob\nStorage for arbitrary meta-information about the blob\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s sequence number of the Iceberg …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nFor Iceberg, it’s ID of the Iceberg table’s snapshot …\nSNAFU context selector for the <code>Error::BytesToInteger</code> …\nSNAFU context selector for the <code>Error::Close</code> variant\nSNAFU context selector for the <code>Error::DeserializeJson</code> …\nContains the error value\nSNAFU context selector for the <code>Error::Flush</code> variant\nSNAFU context selector for the <code>Error::InvalidBlobAreaEnd</code> …\nSNAFU context selector for the <code>Error::InvalidBlobOffset</code> …\nSNAFU context selector for the <code>Error::MagicNotMatched</code> …\nContains the success value\nSNAFU context selector for the <code>Error::ParseStageNotMatch</code> …\nSNAFU context selector for the <code>Error::Read</code> variant\nSNAFU context selector for the <code>Error::Seek</code> variant\nSNAFU context selector for the <code>Error::SerializeJson</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Write</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>PuffinAsyncReader</code> defines an asynchronous reader for …\nPuffin file reader, implemented <code>PuffinSyncReader</code> and …\n<code>PuffinSyncReader</code> defines a synchronous reader for puffin …\nread particular blob data based on given metadata\nread particular blob data based on given metadata\nfetch the FileMetadata\nfetch the FileMetadata\nThe metadata of the puffin file, which is parsed from the …\nThe source of the puffin file\nPuffin file reader, implemented <code>PuffinSyncReader</code> and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe metadata of the puffin file, which is parsed from the …\nThe source of the puffin file\nRepresents a read operation that needs to be performed, …\nParser for the footer of a Puffin data file\nThe internal stages of parsing the footer. This enum …\nManages the parsing process of the file’s footer.\nProcesses the bytes that have been read according to the …\nTotal file size; used for calculating offsets to read from.\nFinalizes the parsing process, ensuring all stages are …\nFlags from the footer, set when the <code>Flags</code> field is parsed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata from the footer’s payload, set when the <code>Payload</code> …\nDetermines the next segment of bytes to read based on the …\nParses the footer from the IO source in a asynchronous …\nParses the footer from the IO source in a synchronous …\nSize of the footer’s payload, set when the <code>PayloadSize</code> …\nCurrent stage in the parsing sequence of the footer.\nBlob ready to be written\nThe trait for writing Puffin files asynchronously\nPuffin file writer, implements both <code>PuffinSyncWriter</code> and …\nThe trait for writing Puffin files synchronously\nAdd a blob to the Puffin file\nAdd a blob to the Puffin file\nThe metadata of the blobs\nThe type of the blob\nThe data of the blob\nFinish writing the Puffin file, returns the number of …\nFinish writing the Puffin file, returns the number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe properties of the file\nThe properties of the blob\nSet the properties of the Puffin file\nSet the properties of the Puffin file\nThe writer to write to\nThe number of bytes written\nPuffin file writer, implements both <code>PuffinSyncWriter</code> and …\nThe metadata of the blobs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe properties of the file\nThe writer to write to\nThe number of bytes written\nWriter for the footer of a Puffin file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerializes the footer to bytes\nAppends reserved flags (currently zero-initialized) to the …\nMetadata of a Puffin file\nBuilder for <code>FileMetadata</code>.\nError type for FileMetadataBuilder\nUninitialized field\nCustom validation error\nMetadata for each blob in the file\nMetadata for each blob in the file\nMetadata for each blob in the file\nBuilds a new <code>FileMetadata</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage for arbitrary meta-information, like writer …\nStorage for arbitrary meta-information, like writer …\nStorage for arbitrary meta-information, like writer …\n<code>PartialReader</code> to perform synchronous or asynchronous reads …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the portion is empty.\nReturns whether the current position is at the end of the …\nCreates a new <code>PartialReader</code> for the given resource.\noffset of the portion in the resource\nReturns the current position in the portion.\nThe current position within the portion.\nReturns the size of the portion in portion.\nsize of the portion in the resource\nResource for the portion. The <code>offset</code> and <code>size</code> fields are …\nCalculates the new position after seeking. It checks if …")