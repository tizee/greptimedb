searchState.loadedDescShard("mito2", 0, "Mito\nCache for the engine.\nConfigurations.\nMito developer document\nMito region engine.\nFlush related utilities and structs.\nmanifest storage\nMemtables are write buffers for regions.\nCommon structs and utilities for reading data.\nMito region.\nWorker requests.\nSorted strings tables.\nAbstraction to get current time.\nWrite ahead log of the engine.\nStructs and utilities for writing regions.\nA layer to access SST files under the same directory.\nContents to build a SST.\nClean the directory.\nWhether to create inverted index.\nDeletes a SST file (and its index file if it has one) with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe options of the index for the region.\nThe size of write buffer for index.\nIntermediate manager for inverted index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the file exists in the object store.\nThe threshold of memory size to create inverted index.\nReturns a new AccessLayer for specific <code>region_dir</code>.\nCreates a fs object store with atomic write dir.\nReturns the object store of the layer.\nTarget object store.\nReturns a reader builder for specific <code>file</code>.\nReturns the directory of the region.\nWrites a SST with specific <code>file_id</code> and <code>metadata</code> to the …\nManages cached data for the engine.\nBuilder to construct a CacheManager.\nMaps (region, file, row group, column) to PageValue.\nCache key for pages of a SST row group.\nCached row group pages for a column.\nMaps (region id, file id) to ParquetMetaData.\nCache key (region id, file id) for SST meta.\nMaps Value to a vector that holds this value repeatedly.\nBuilds the CacheManager.\nReturns a builder to build the cache.\nCache size of different cache value.\nIndex of the column in the row group.\nReturns memory used by the value (estimated).\nReturns memory used by the key (estimated).\nReturns memory used by the key (estimated).\nA cache for files.\nId of the SST file to cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets pages for the row group.\nGets cached ParquetMetaData.\nGets a vector with repeated value for specific <code>key</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new page value.\nCache for SST pages.\nSets page cache size.\nAll pages of the column in the row group.\nPuts pages of the row group into the cache.\nPuts ParquetMetaData into the cache.\nPuts a vector with repeated value into the cache.\nRegion id of the SST file to cache.\nRemoves ParquetMetaData from the cache.\nIndex of the row group.\nCache for SST metadata.\nSets meta cache size.\nUpdates cache hit/miss metrics.\nCache for vectors.\nSets vector cache size.\nA write-through cache for remote object stores.\nGets the write cache.\nSets write cache.\nA Cache for writing files to object stores.\nReturns estimated size of ColumnDescriptor allocated from …\nReturns estimated size of FileMetaData allocated from heap.\nReturns estimated size of ParquetColumnIndex allocated …\nReturns estimated size of ParquetMetaData.\nReturns estimated size of ParquetOffsetIndex allocated …\nReturns estimated size of ColumnDescriptor allocated from …\nReturns estimated size of SchemaDescriptor allocated from …\nSubdirectory of cached files.\nA file cache manages files on local store and evict files …\nType of the file.\nKey of file cache index.\nAn entity that describes the file in the file cache.\nParquet file.\nPuffin file.\nConverts the file type to string.\nGenerates the path to the cached file.\nReturns the cache file path for the key.\nSize of the file in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the parquet metadata in file cache. If the file is not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local store of the file cache.\nLocal store to cache files.\nIndex to track cached files.\nCreates a new file cache.\nCreates a new index key.\nParses the file type from string.\nParse index key from the file name.\nPuts a file into the cache index.\nReads ranges from the cache.\nReads a file from the cache.\nRecovers the index from local store.\nRemoves a file from the cache explicitly.\nRequest to write and upload a SST.\nA cache for uploading files to remote object stores.\nReturns the file cache of the write cache.\nLocal file cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPath to upload the index file.\nIntermediate manager for inverted index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the cache with a <code>local_store</code> to cache files and a …\nCreates a write cache based on local fs.\nObject store manager. TODO: Remove unused after …\nRemote object store to upload.\nUploads a Parquet file or a Puffin file to the remote …\nPath to upload the file.\nWrites SST to the cache and then uploads it to the remote …\nRegion compaction request.\nCompaction scheduler tracks and manages compaction tasks.\nStatus of running and pending region compaction tasks.\nPending compaction tasks.\nAccess layer of the region.\nBuilds compaction picker according to CompactionOptions.\nFile purger of the region.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge the watier to the pending compaction.\nCreates a new CompactionStatus\nCreates a new compaction request for compaction picker.\nNotifies the scheduler that the compaction job is failed.\nNotifies the scheduler that the compaction job is finished …\nSend compaction error to waiter.\nNotifies the scheduler that the region is closed.\nNotifies the scheduler that the region is dropped.\nNotifies the scheduler that the region is truncated.\nCompaction pending to schedule.\nPush waiter to the request.\nPush waiter to the request.\nId of the region.\nCompacting regions.\nSender to send notification to the region worker.\nRequest sender of the worker that this scheduler belongs …\nSchedules a compaction for the region.\nSchedules a compaction request.\nStart time of compaction task.\nVersion control of the region.\nWaiters of the compaction request.\nPicker picks input SST files and builds the compaction …\nA set of predefined time buckets.\n<code>TwcsPicker</code> picks files of which the max timestamp are in …\nAdds a new file to window and updates time range.\nThe region is using append mode.\nAssigns files to windows with predefined window size (in …\nBuilds compaction output from files. For active writing …\nBuilds BoxedBatchReader that reads all SST files and …\nWhether to remove deletion markers.\nFinds the latest active writing window among all files. …\nFits a given time span into time bucket by find the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds all expired SSTs across levels.\nIndex options of the region.\nInfers the suitable time bucket duration. Now it simply …\nCompaction input files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent listener.\nManifest context.\nMerges all SST files. Returns <code>(output files, input files)</code>.\nCreates a new Window with given file.\nHandles compaction failure, notifies all waiters.\nCompaction output file level.\nChecks if two inclusive timestamp ranges overlap with each …\nReturns the time range of all files in current window …\nRequest sender to notify the worker.\nNotifies region worker to handle post-compaction tasks.\nStart time of compaction task\nTarget storage of the region.\nVersion control to update.\nSenders that are used to notify waiters waiting for …\nThe action is performed automatically based on internal …\nDefault max running background job.\nDefault channel size for parallel scan task.\nThe action is explicitly disabled.\nConfiguration options for the inverted index.\nUse <code>1/MEM_CACHE_SIZE_FACTOR</code> of OS memory size as mem cache …\nConfiguration for MitoEngine.\nOperational mode for certain actions.\nUse <code>1/SST_META_CACHE_SIZE_FACTOR</code> of OS memory size as SST …\nWhether to allow stale entries read during replay.\nWhether to apply the index on query: automatically or …\nWhether the action is automatic.\nInterval to auto flush a region if it has not flushed yet …\nWhether to compress manifest and checkpoint file by gzip …\nWhether to create the index on compaction: automatically …\nWhether to create the index on flush: automatically or …\nWhether the action is disabled.\nDivide cpu num by a non-zero <code>divisor</code> and returns at least …\nWhether to enable the experimental write cache.\nFile system path for write cache, defaults to …\nCapacity for write cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal write buffer size threshold to reject write …\nGlobal write buffer size threshold to trigger flush.\nFile system path to store intermediate files for external …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverted index configs.\nNumber of meta action updated to trigger a new checkpoint …\nMax number of running background jobs (default 4).\nMemory threshold for performing an external sort during …\nMemtable config\nNumber of region workers (default: 1/2 of cpu cores). Sets …\nCache size for pages of SST row groups. Setting it to 0 to …\nCapacity of the channel to send data from parallel scan …\nSanitize incorrect configurations.\nParallelism to scan a region (default: 1/4 of cpu cores).\nCache size for SST metadata. Setting it to 0 to disable …\nBuffer size for SST writing.\nCache size for vectors and arrow arrays. Setting it to 0 …\nRequest channel size of each worker (default 128).\nMax batch size for a worker to handle requests (default …\nWrite buffer size for creating the index.\nInner struct of MitoEngine.\nRegion engine implementation for timeseries data.\nConfig of the engine.\nEdit region’s metadata by RegionEdit directly. Use with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet metadata of a region.\nRetrieve region’s metadata.\nReturns the region disk/memory usage information.\nHandles the scan <code>request</code> and returns a ScanRegion.\nHandle substrait query and return a stream of record …\nHandles RegionRequest and return its executed result.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the specific region exists.\nCheck whether the region edit is valid. Only adding files …\nReturns a new EngineInner with specific <code>config</code>, <code>log_store</code> …\nReturns a new MitoEngine with specific <code>config</code>, <code>log_store</code> …\nScans a region.\nReturns a scanner to scan for <code>request</code>.\nSets read-only for a region and ensures no more writes in …\nSet writable mode for a region.\nStop the inner engine.\nStop the engine.\nRegion workers group.\nSNAFU context selector for the <code>Error::ApplyIndex</code> variant\nSNAFU context selector for the <code>Error::ArrowReader</code> variant\nSNAFU context selector for the <code>Error::BiError</code> variant\nSNAFU context selector for the <code>Error::BuildIndexApplier</code> …\nSNAFU context selector for the <code>Error::ChecksumMismatch</code> …\nSNAFU context selector for the <code>Error::CleanDir</code> variant\nSNAFU context selector for the <code>Error::ColumnNotFound</code> …\nSNAFU context selector for the <code>Error::CompactRegion</code> variant\nSNAFU context selector for the <code>Error::CompatReader</code> variant\nSNAFU context selector for the <code>Error::CompressObject</code> …\nSNAFU context selector for the <code>Error::ComputeArrow</code> variant\nSNAFU context selector for the <code>Error::ComputeVector</code> variant\nSNAFU context selector for the <code>Error::ConvertColumnDataType</code>…\nSNAFU context selector for the <code>Error::ConvertMetaData</code> …\nSNAFU context selector for the <code>Error::ConvertValue</code> variant\nSNAFU context selector for the <code>Error::ConvertVector</code> variant\nSNAFU context selector for the <code>Error::CreateDefault</code> variant\nSNAFU context selector for the <code>Error::DecodeWal</code> variant\nSNAFU context selector for the <code>Error::DecompressObject</code> …\nSNAFU context selector for the <code>Error::DeleteIndex</code> variant\nSNAFU context selector for the <code>Error::DeleteSst</code> variant\nSNAFU context selector for the <code>Error::DeleteWal</code> variant\nSNAFU context selector for the <code>Error::DeserializeField</code> …\nSNAFU context selector for the <code>Error::EmptyManifestDir</code> …\nSNAFU context selector for the <code>Error::EmptyRegionDir</code> …\nSNAFU context selector for the <code>Error::EncodeMemtable</code> …\nSNAFU context selector for the <code>Error::EncodeWal</code> variant\nContains the error value\nSNAFU context selector for the <code>Error::FieldTypeMismatch</code> …\nAn error type to indicate that schema is changed and we …\nSNAFU context selector for the <code>Error::FillDefault</code> variant\nSNAFU context selector for the <code>Error::FilterRecordBatch</code> …\nSNAFU context selector for the <code>Error::FlushRegion</code> variant\nSNAFU context selector for the <code>Error::IndexEncodeNull</code> …\nSNAFU context selector for the <code>Error::IndexFinish</code> variant\nSNAFU context selector for the <code>Error::InvalidBatch</code> variant\nSNAFU context selector for the <code>Error::InvalidConfig</code> variant\nSNAFU context selector for the <code>Error::InvalidMeta</code> variant\nSNAFU context selector for the <code>Error::InvalidMetadata</code> …\nSNAFU context selector for the <code>Error::InvalidParquet</code> …\nSNAFU context selector for the <code>Error::InvalidRecordBatch</code> …\nSNAFU context selector for the <code>Error::InvalidRegionOptions</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidRegionRequest</code> …\nSNAFU context selector for the <code>Error::InvalidRequest</code> …\nSNAFU context selector for the <code>Error::InvalidScanIndex</code> …\nSNAFU context selector for the <code>Error::InvalidSchedulerState</code>…\nSNAFU context selector for the <code>Error::InvalidSender</code> variant\nSNAFU context selector for the <code>Error::Join</code> variant\nSNAFU context selector for the <code>Error::JsonOptions</code> variant\nSNAFU context selector for the <code>Error::NewRecordBatch</code> …\nSNAFU context selector for the <code>Error::NotSupportedField</code> …\nSNAFU context selector for the <code>Error::ObjectStoreNotFound</code> …\nContains the success value\nSNAFU context selector for the <code>Error::OpenDal</code> variant\nSNAFU context selector for the <code>Error::OperateAbortedIndex</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::PuffinAddBlob</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::PuffinFinish</code> variant\nSNAFU context selector for the <code>Error::PuffinReadBlob</code> …\nSNAFU context selector for the <code>Error::PuffinReadMetadata</code> …\nSNAFU context selector for the <code>Error::PushIndexValue</code> …\nSNAFU context selector for the <code>Error::ReadDataPart</code> variant\nSNAFU context selector for the <code>Error::ReadParquet</code> variant\nSNAFU context selector for the <code>Error::ReadWal</code> variant\nSNAFU context selector for the <code>Error::Recv</code> variant\nSNAFU context selector for the <code>Error::RegionClosed</code> variant\nSNAFU context selector for the <code>Error::RegionCorrupted</code> …\nSNAFU context selector for the <code>Error::RegionDropped</code> variant\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::RegionNotFound</code> …\nSNAFU context selector for the <code>Error::RegionState</code> variant\nSNAFU context selector for the <code>Error::RegionStopped</code> variant\nSNAFU context selector for the <code>Error::RegionTruncated</code> …\nSNAFU context selector for the <code>Error::RejectWrite</code> variant\nSNAFU context selector for the <code>Error::SerdeJson</code> variant\nSNAFU context selector for the <code>Error::SerializeField</code> …\nSNAFU context selector for the <code>Error::StaleLogEntry</code> variant\nSNAFU context selector for the <code>Error::StopScheduler</code> variant\nSNAFU context selector for the <code>Error::UnexpectedReplay</code> …\nSNAFU context selector for the <code>Error::Upload</code> variant\nSNAFU context selector for the <code>Error::Utf8</code> variant\nSNAFU context selector for the <code>Error::WorkerStopped</code> variant\nSNAFU context selector for the <code>Error::WriteBuffer</code> variant\nSNAFU context selector for the <code>Error::WriteGroup</code> variant\nSNAFU context selector for the <code>Error::WriteWal</code> variant\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if we need to fill default value for a region.\nReturns true if the file is not found on the object store.\nFlush to alter table.\nEngine reaches flush threshold.\nReason of a flush task.\nManages background flushes of a worker.\nFlush status of a region scheduled by the FlushScheduler.\nManual flush.\nOther reasons.\nFlush periodically.\nTask to flush a region.\nGlobal write buffer (memtable) manager.\nDefault WriteBufferManager implementation.\nAdd ddl request to pending queue.\nAdd write request to pending queue.\nGet flush reason as static str.\nRuns the flush task.\nFlushes memtables to level 0 SSTs and updates the manifest.\nThere is a flush task running.\nWe have freed <code>mem</code> bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the size limit for mutable memtables.\nWrite buffer size for the engine.\nReturns true if the region has pending DDLs.\nIndex options for the region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the flush task into a background job.\nReturns true if the region already requested flush.\nMemory that hasn’t been scheduled to free (e.g. used by …\nReturns the total memory used by memtables.\nMemory in used (e.g. used by mutable and immutable …\nMerge two flush tasks.\nMerges the task to pending task.\nMutable memtable memory size limit.\nReturns memory usage of mutable memtables.\nCreates a new flush scheduler.\nReturns a new manager with specific …\nSend flush error to waiter.\nNotifies the scheduler that the flush job is failed.\nNotifies the scheduler that the flush job is finished.\nNotifies the scheduler that the region is closed.\nNotifies the scheduler that the region is dropped.\nNotifies the scheduler that the region is truncated.\nConsumes the task and notify the sender the job is success.\nPending ddl requests.\nTask waiting for next flush.\nRequests waiting to write after altering the region.\nPush the sender if it is not none.\nReason to flush.\nRegion to flush.\nCurrent region.\nTracks regions need to flush.\nRequest sender to notify the worker.\nReserves <code>mem</code> bytes.\nSchedules a flush <code>task</code> for specific <code>region</code>.\nTells the manager we are freeing <code>mem</code> bytes.\nSchedules a new flush task when the scheduler can submit …\nBackground job scheduler.\nNotify flush job status.\nFlush result senders.\nReturns whether to trigger the engine.\nReturns whether to stall write requests.\nVersion control of the region.\nDefines RegionMetaAction related structs and …\nChange region’s metadata for request like ALTER\nEdit region’s state for changing options or file list.\nThe region manifest data.\nActions that can be applied to region manifest.\nLast data truncated in the region.\nRemove the region.\nTruncate the region.\nInferred compaction time window.\nCheck if the builder keeps a RegionMetadata.\nEncode self into json in the form of string lines.\nSST files.\nLast WAL entry id of flushed data.\nLast sequence of flushed data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last manifest version that this checkpoint …\nCurrent manifest version.\nThe metadata after changed.\nMetadata of the region.\nLast WAL entry id of truncated data.\nLast WAL entry id of truncated data.\nStart with a checkpoint.\nManage region’s manifest. Provide APIs to access …\nOptions for RegionManifestManager.\nInterval of version (ManifestVersion) between two …\nMakes a new checkpoint. Return the fresh one if there are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if a newer version manifest file is found.\nIncreases last version and returns the increased version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetches the last RegionCheckpoint from storage.\nThe last version included in checkpoint file.\nRetrieves the current RegionManifest.\nDirectory to store manifest.\nReturns total manifest size.\nConstructs a region’s manifest and persist it.\nOpens an existing manifest.\nStops the manager.\nUpdates the manifest. Returns the current manifest version …\nA checkpoint file (<code>.checkpoint</code>).\nA delta file (<code>.json</code>).\nDue to backward compatibility, it is possible that the user…\nKey to identify a manifest file.\nReturns the checkpoint file path under the <strong>current</strong> …\nDelete manifest files that version &lt; end. If …\nReturns the delta file path under the <strong>current</strong> compression …\nFetch all manifests in concurrent.\nReturn’s the file compress algorithm by file extension.\nReturn’s the file manifest version from path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all <code>R</code>s in the root directory that meet the <code>filter</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the last checkpoint path, because the last …\nLoad the latest checkpoint. Return manifest version and …\nReturns the CompressionType according to whether to …\nReturns the manifest dir\nReturns a iterator of manifests.\nStores the size of each manifest file.\nSave the delta manifest file.\nSave the checkpoint manifest file.\nScans the manifest files in the range of [start, end) and …\nSet the size of the checkpoint file by checkpoint version.\nSet the size of the delta file by delta version.\nSorts the manifest files.\nCompute the size(Byte) in manifest size map.\nThe latest version this checkpoint contains.\nMemtable memory allocation tracker.\nIn memory write buffer.\nBuilder to build a new Memtable.\nProvider of memtable builders for regions.\nConfig for memtables.\nId for memtables.\nBuilds a new memtable instance.\nReturns the estimated bytes allocated by this memtable.\nReturns bytes allocated.\nBytes allocated by the tracker.\nMarks we have finished allocating memory so we can free it …\nThe estimated bytes allocated by this memtable from heap.\nForks this (immutable) memtable and returns a new mutable …\nTurns a mutable memtable into an immutable memtable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the id of this memtable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether allocating is done.\nReturns true if the memtable is empty.\nScans the memtable. <code>projection</code> selects columns to read, …\nReturns a new AllocTracker.\nTracks <code>bytes</code> memory is allocated.\nMemtable implementation based on a partition tree.\nReturns the MemtableStats info of Memtable.\nPartitions memtables by time.\nReturns the time range of the memtable.\nThe time range that this memtable contains.\nMemtable version.\nWrites key values into the memtable.\nReturns the write buffer manager.\nWrites one key value pair into the memtable.\nKey value view of a row.\nKey value view of a mutation.\nHelper to read rows in key, value order for sparse data.\nGet field columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nKey value read helper.\nKey and value column indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a key value iterator.\nMutation to read.\nCreates KeyValues from specific <code>mutation</code>.\nCreates a SparseReadRowHelper for specific <code>rows</code>.\nGet number of field columns.\nNumber of primary key columns.\nGet number of primary key columns.\nReturns number of rows.\nGet op type.\nGet primary key columns.\nGet sequence.\nGet timestamp.\nUse <code>1/DICTIONARY_SIZE_FACTOR</code> of OS memory as dictionary …\nConfig for the partition tree memtable.\nMemtable based on a partition tree.\nBuilder to build a PartitionTreeMemtable.\nId of a primary key inside a tree.\nIndex of a primary key in a shard.\nId of a shard, only unique inside a partition.\nData part of a shard.\nNumber of rows to freeze a data part.\nWhether to delete duplicates rows.\nKey dictionary of a shard.\nTotal bytes of dictionary to keep in fork.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMax keys in an index shard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal metrics of the memtable.\nReturns a new memtable.\nCreates a new builder with specific <code>write_buffer_manager</code>.\nPartition of a partition tree.\nShard in a partition.\nBuilder of a shard.\nImplementation of the partition tree.\nUpdates stats of the memtable.\nCreates a mutable memtable from the tree.\nInitial capacity for the data buffer.\nData part batches returns by <code>DataParts::read</code>.\nRange of a data batch.\nBuffer for the value part (pk_index, ts, sequence, …\nFormat of immutable data part.\nData parts under a shard.\nReader for all parts inside a <code>DataParts</code>.\nParquet-encoded <code>DataPart</code>.\nThe active writing buffer.\nReturns current data batch of reader.\nReturns current data batch.\nSchema for data part (primary keys are replaced with …\nConverts <code>DataBuffer</code> to record batches, with rows sorted …\nEnd of current primary key inside record batch.\nBuilders for field columns.\nFreezes <code>DataBuffer</code> to bytes. If <code>pk_weights</code> is present, it …\nFreezes active buffer and creates a new active buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nimmutable (encoded) parts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the buffer is empty.\nReturns false if current reader is exhausted.\nAdvances reader to next data batch.\nReturns the number of rows in the active buffer.\nReturns num of rows in data buffer.\nBuilder for op_type column.\nPrimary key index of this batch.\nGets <code>pk_index</code> array from record batch.\nBuilder for primary key index.\nRange of current primary key inside record batch\nRecord batch of data.\nBuilds a lazily initialized data buffer reader from …\nReads frozen data part and yields DataBatches.\nReads data from all parts including active and frozen …\nSearches for next pk index, and it’s offset range in a …\nSearches next primary key along with it’s offset range …\nBuilder for sequence column.\nStart of current primary key inside record batch.\nBuilder for timestamp column.\nCreates a <code>DataBuffer</code> instance with given schema and …\nWrites a row to data buffer.\nWrites a row into parts.\nA reader that dedup sorted batches from a merger.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new dedup reader.\nA block in the key dictionary.\nReader to scan the KeyDictBuilder.\nBuffer to store unsorted primary keys.\nA key dictionary.\nBuilder to build a key dictionary.\nMaximum keys in a DictBlock.\nMax keys of the dictionary.\nReturns pk weights to sort a data part and replaces pk …\nDictionary blocks.\nUnsorted key blocks.\nFinishes the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds the key to the builder and returns its index if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the buffer is empty.\nReturns true if the builder is full.\nBuffer for active dict block.\nBuilder for binary key array.\nGets the key by the pk index.\nGets the primary key by its index.\nBytes allocated by keys in the index.\nBytes of keys in the index.\nMaps pk index to position of the key in Self::dict_blocks.\nContainer of keys in the block.\nReturns number of items in the buffer.\nCreates a new builder that can hold up to <code>capacity</code> keys.\nNumber of keys in the builder.\nMaps primary key to pk index.\nReturns pk weights to sort a data part and replaces pk …\nReturns pk weights to sort a data part and replaces pk …\nPushes a new key and returns its pk index.\nReads the builder.\nReturns the shared memory size.\nNodes of merger’s heap.\nAdvances <code>len</code> rows from current batch. If current batch is …\nLength of current item.\nReturns current node to read. Only Self::current_rows rows …\nCurrent node to read.\nCurrent range of the batch in the source.\nReturns rows of current node to read.\nThe number of rows in current node that are valid to read.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeap to find node to read.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the other node is behind (exclusive) current node.\nReturns true if current node is not exhausted.\nReturns true if current merger is still valid.\nAdvances the merger to the next item.\nSearches first key of <code>other</code> in current item and returns …\nMetrics of writing the partition tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSize allocated by keys.\nMaximum timestamp\nMinimum timestamp.\nSize allocated by values.\nInner struct of the partition.\nA tree partition.\nKey of a partition.\nReader to scan rows in a partition.\nStructs to reuse across readers to avoid allocating for …\nConverts current data batch into a Batch.\nConverts a DataBatch to a Batch.\nWhether to dedup batches.\nForks the partition.\nFreezes the partition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet partition key from the key value.\nReturns true if the partition has data.\nReturns true if the region can be partitioned.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is a partition column.\nReturns true if the reader is valid.\nDoes filter contain predicate on primary key columns after …\nCreates a new partition.\nAdvances the reader.\nMap to index pk to pk id.\nBuffer to store pk weights.\nScans data in the partition.\nShard whose dictionary is active.\nShards with frozen dictionary.\nGets the stats of the partition.\nWrites to the partition without a primary key.\nWrites to the partition with a primary key.\nSource that returns DataBatch.\nShard stores data related to the same key dictionary.\nA merger that merges batches from multiple shards.\nNode for the merger to get items.\nReader to read rows in a shard.\nReturns the data part.\nReturns the current primary key bytes or None if it doesn…\nReturns current pk id.\nNumber of rows to freeze a data part.\nData in the shard.\nForks a shard.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the shard is empty (No data).\nReturns whether current source is still valid.\nKey dictionary of the shard. <code>None</code> if the schema of the …\nReturns a new shard.\nAdvances source to next data batch.\nScans the shard.\nReturns the memory size of the shard part.\nWrites a key value into the shard.\nBuilder to write keys and data to a shard that the key …\nReader to scan a shard builder.\nReturns the current shard id of the builder.\nId of the current shard to build.\nBuffer to store data.\nNumber of rows to freeze a data part.\nBuilder for the key dictionary.\nBuilds a new shard and resets the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the builder is empty.\nReturns a new builder.\nScans the shard builder.\nReturns true if the builder need to freeze.\nWrite a key value with its encoded primary key.\nWrite a key value with given pk_index (caller must ensure …\nThe partition tree.\nConfig of the tree.\nFetch next partition.\nForks an immutable tree. Returns a mutable tree that …\nMarks the tree as immutable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the tree is empty.\nWhether the tree has multiple partitions.\nMetadata of the region.\nCreates a new partition tree.\nFetches next batch.\nPartitions in the tree.\nScans the tree.\nPrimary key codec.\nWrite key-values into the tree.\nReturns the write buffer manager.\nManager to report size of the tree.\nWrite one key value pair into the tree.\nTime range of a partition.\nA partition holds rows with timestamps between <code>[min, max)</code>.\nPartitions.\nBuilder of memtables.\nReturns whether the <code>ts</code> belongs to the partition.\nReturns whether the <code>ts</code> belongs to the partition.\nForks latest partition.\nFreezes all memtables.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutable data of partitions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all memtables are empty.\nAppend memtables in partitions to <code>memtables</code>.\nAppend memtables in partitions to small vec.\nReturns all partitions.\nExclusive max timestamp of rows in the partition.\nReturns memory usage.\nMemtable of the partition.\nMetadata of the region.\nInclusive min timestamp of rows in the partition.\nReturns a new empty partition list with optional duration.\nReturns the next memtable id.\nNext memtable id.\nReturns the number of partitions.\nReturns partition duration.\nDuration of a partition.\nComputes the start timestamp of the partition for <code>ts</code>.\nAll partitions.\nTime range of the partition. <code>None</code> means there is no time …\nWrite rows to the part.\nWrite key values to memtables.\nWrite to multiple partitions.\nInitial vector builder capacity.\nMetrics for reading the memtable.\nA <code>Series</code> holds a list of field values of some given …\nMemtable implementation that groups rows by their primary …\nBuilder to build TimeSeriesMemtable.\n<code>ValueBuilder</code> holds all the vector builders for field …\nValues holds an immutable vectors of field columns, …\nReturns a vector of all columns converted to arrow Array …\nFreezes active part to frozen part and compact frozen part …\nFreezes the active part and push it to <code>frozen</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds a new Values instance from columns.\nReturns the series for given primary key, or create a new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates all series in SeriesSet.\nReturns the length of ValueBuilder\nCreates a new builder with specific <code>write_buffer_manager</code>.\nNumber of batch read.\nNumber of series pruned.\nNumber of rows read.\nCreates an arrow SchemaRef that only contains primary keys …\nPushes a row of values into Series.\nPushes a new row to <code>ValueBuilder</code>. We don’t need primary …\nDuration to scan the memtable.\nConverts Values to <code>Batch</code>, sorts the batch according to …\nTotal series in the memtable.\nUpdates memtable stats.\nA version of current memtables in a region.\nReturns a new MemtableVersion which switches the old …\nReturns the argument unchanged.\nImmutable memtables.\nImmutable memtables.\nReturns the memory usage of the immutable memtables.\nCalls <code>U::from(self)</code>.\nReturns true if the memtable version is empty.\nLists mutable and immutable memtables.\nMutable memtable.\nReturns the memory usage of the mutable memtable.\nReturns a new MemtableVersion with specific mutable …\nRemoves memtables by ids from immutable memtables.\nCache size in bytes.\nCache hit counter.\nCache miss counter.\nTimer of whole compaction task.\nCounter of failed compaction task.\nCounter of all requested compaction task.\nTimer of different stages in compaction.\nFile type label.\nHistogram of flushed bytes.\nElapsed time of a flush job.\nCounter of scheduled failed flush jobs.\nReason to flush.\nCounter of scheduled flush requests. Note that the flush …\nElapsed time to handle requests.\nTimer of index application.\nGauge of index apply memory usage.\nCounter of created index bytes.\nTimer of index creation.\nGauge of index create memory usage.\nCounter of rows indexed.\nCounter of flush operations on intermediate files.\nCounter of read bytes on intermediate files.\nCounter of read operations on intermediate files.\nCounter of seek operations on intermediate files.\nCounter of write bytes on intermediate files.\nCounter of write operations on intermediate files.\nCounter of r/w bytes on index related IO operations.\nCounter of r/w operations on index related IO operations, …\nCounter of flush operations on puffin files.\nCounter of read bytes on puffin files.\nCounter of read operations on puffin files.\nCounter of seek operations on puffin files.\nCounter of write bytes on puffin files.\nCounter of write operations on puffin files.\nElapsed time of manifest operation. Labeled with “op”.\nGlobal memtable dictionary size in bytes.\nCounter of filtered rows during merge.\nPartition tree memtable data buffer freeze metrics\nPartition tree memtable read path metrics\nCounter of filtered rows by precise filter.\nHistogram for the number of batches returned per query.\nHistogram for the number of rows returned per query.\nCounter of rows read from different source.\nCounter of row groups read.\nHistogram for the number of SSTs to scan per query.\nTimer of different stages in query.\nGauge for open regions\nStage label.\nType label.\nUpload bytes counter.\nGlobal write buffer size in bytes.\nCounter of rejected write requests.\nCounter of rows to write.\nElapsed time of each write stage.\nCounter of stalled write requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage internal representation of a batch of rows for a …\nBuilder to build Batch.\nA column in a Batch.\nAsync batch reader.\nPointer to BatchReader.\nPointer to a stream that yields Batch.\nSource from a BoxedBatchIterator.\nSource from a BoxedBatchReader.\nAsync Batch reader and iterator wrapper.\nSource from a BoxedBatchStream.\nLen of timestamp in arrow row format.\nBuilds the Batch.\nId of the column.\nUtilities to adapt readers with different schema.\nTakes <code>batches</code> and concat them into one batch.\nHelper function to concat arrays from <code>iter</code>.\nData of the column.\nReturns fields in the batch.\nFields organized in columnar format.\nRemoves rows whose op type is delete.\nReturns the first sequence in the batch or <code>None</code> if the …\nReturns the first timestamp in the batch or <code>None</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a sequence at given <code>index</code>.\nGets a timestamp at given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the number of rows in the batch is 0.\nReturns whether the op types vector only contains put …\nReturns the last sequence in the batch or <code>None</code> if the …\nReturns the last timestamp in the batch or <code>None</code> if the …\nMerge reader implementation.\nCreates a new BatchBuilder with primary key.\nCreates a new batch.\nFetch next Batch.\nReturns next Batch from this data source.\nReturns the number of rows in the batch.\nReturns op types of the batch.\nOp types of rows\nTry to set an array as op types.\nReturns possibly decoded primary-key values.\nPossibly decoded <code>primary_key</code> values. Some places would …\nReturns primary key of the batch.\nPrimary key encoded in a comparable form.\nReturns ids and datatypes of fields in the Batch after …\nUtilities for projection.\nPush a field column.\nPush an array as a field.\nTrue if op types only contains put operations.\nScans a region according to the scan request.\nSequential scan.\nReturns sequences of the batch.\nSequences of rows\nTry to set an array as sequences.\nSets possibly decoded primary-key values.\nReplaces the primary key of the batch.\nSlice the batch, returning a new batch.\nSorts rows in the batch. If <code>dedup</code> is true, it also removes …\nTakes the batch in place.\nReturns timestamps of the batch.\nTimestamps of rows, should be sorted and not null.\nTry to set an array as timestamps.\nReturns timestamps in a native slice or <code>None</code> if the batch …\nUnordered scanner.\nSet all field columns.\nTries to set fields for the batch.\nCreates a new BatchBuilder with all required columns.\nHelper to make fields compatible.\nHelper to make primary key compatible.\nReader to adapt schema of underlying reader to expected …\nDefault value for the column.\nIndex of the column in source batch.\nIndex in source batch or a default value to fill a column.\nColumn Ids and DataTypes the reader actually returns.\nMake primary key of the <code>batch</code> compatible.\nMake fields of the <code>batch</code> compatible.\nOptional fields adapter.\nOptional primary key adapter.\nRow converter to append values to primary keys.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if <code>left</code> and <code>right</code> have same columns to read.\nIndices to convert actual fields to expect fields.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a CompatFields if needed.\nCreates a CompatPrimaryKey if needed.\nCreates a new compat reader.\nUnderlying reader.\nDefault values to append.\nId of the column.\nDefault value. The vector has only 1 element.\nType to compare Batch by first row.\nReader to merge sorted batches.\nBuilder to build and initialize a MergeReader.\nMetrics for the merge reader.\nA <code>Node</code> represent an individual input data source to be …\nBuilds and initializes the reader, then resets the builder.\nCompares by primary key, time index, sequence desc.\nHolds <code>Node</code> whose key range of current batch <strong>isn’t</strong> …\nReturns current batch.\nCurrent batch to be read. The node ensures the batch is …\nRemove duplicate timestamps.\nRemove duplicate timestamps. Default is true.\nReturns current batch and fetches next batch from the …\nFetches one batch from the hottest node.\nCost to fetch batches from sources.\nFetches non-duplicated rows from the hottest node.\nRemove deletion markers\nRemove deletion markers.\nFilters the first duplicate <code>timestamp</code> in <code>top_node</code> and <code>hot</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a builder from sources.\nHolds Nodes whose key range of current batch <strong>is</strong> overlapped …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the key range of current batch in <code>self</code> is …\nReturns whether the node still has batch to read.\nIf <code>filter_deleted</code> is set to true, removes deleted entries …\nLocal metrics.\nCreates and initializes a new MergeReader.\nReturns an empty builder.\nInitialize a node.\nNumber of deleted rows.\nNumber of skipped duplicate rows.\nNumber of times to fetch batches.\nNumber of times to fetch rows.\nNumber of input rows.\nNumber of output rows.\nBatch to output.\nReturns the primary key of current batch.\nPushes a batch iterator to sources.\nPushes a batch reader to sources.\nMoves nodes in <code>cold</code> heap, whose key range is overlapped …\nPush the node popped from <code>hot</code> back to a proper heap.\nTotal scan cost of the reader.\nSkips first <code>num_to_skip</code> rows from node’s current batch. …\nData source of this <code>Node</code>.\nInput sources.\nIndex of a vector in a Batch.\nIndex in fields.\nOnly cache vector when its length <code>&lt;=</code> this value.\nHandles projection and converts a projected Batch to a …\nIndex in primary keys.\nThe time index column.\nReturns a new mapper without projection.\nReturns ids of fields in Batches the mapper expects to …\nIds and DataTypes of field columns in the Batch.\nMaps column in RecordBatch to index in Batch.\nDecoder for primary key.\nReturns ids of projected columns.\nIds of columns to project. It keeps ids in the same order …\nConverts a Batch to a RecordBatch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOutput record batch contains tags.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata that created the mapper.\nMetadata of the region.\nReturns a new mapper with projection.\nReturns a vector with repeated values.\nReturns the schema of converted RecordBatch.\nSchema for converted RecordBatch.\nGets a vector with repeated values from specific cache or …\nCommon input for different scanners.\nConfig for parallel scan.\nHelper to scans a region by ScanRequest.\nA scanner scans a region and returns a …\nSequential scan.\nUnordered scan.\nRegion SST access layer.\nAccess layer of the region.\nReturns true if we allow parallel scan.\nThe region is using append mode.\nUse the latest schema to build the index applier.\nScans sources in parallel.\nBuilds and returns sources to read.\nBuild time range predicate from filters.\nCache.\nCache.\nChannel size to send batches. Only takes effect when the …\nReturns true if the time range of a SST <code>file</code> matches the …\nHandles to SST files to scan.\nWhether to remove deletion markers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnores file not found error.\nWhether to ignore inverted index.\nIndex applier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps projected Batches to RecordBatches.\nMemtables to scan.\nCreates a new ScanInput.\nCreates a ScanRegion.\nParallelism to scan data.\nParallelism to scan.\nNumber of tasks expect to spawn to read data.\nPredicate to push down.\nStart time of the query.\nScan request.\nReturns a SendableRecordBatchStream to retrieve scan …\nCreates a scan input.\nReturns a Scanner to scan the region.\nScan sequentially.\nScans the input source in another task and sends batches …\nStart time of the scan task.\nTime range filter for time index.\nUnordered scan.\nVersion of the region at scan.\nSets cache for this query.\nSets files to read.\nSets whether to remove deletion markers during scan.\nIgnores file not found error.\nSets index applier.\nSets memtables to read.\nSets scan parallelism.\nSets parallelism.\nSets predicate to push down.\nSets start time of the query.\nSets time range filter for time index.\nMetrics for SeqScan.\nScans a region and returns rows in a sorted sequence.\nBuilds a BoxedBatchReader that can scan memtables and SSTs …\nBuilds a BoxedBatchReader from sequential scan.\nDuration to build the reader.\nBuilds a stream for the query.\nDuration to convert batches.\nFetch a batch from the reader and convert it into a record …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new SeqScan.\nNumber of batches returned.\nNumber of rows returned.\nDuration to prepare the scan task.\nDuration to scan data.\nDuration of the scan.\nReturns whether to use a parallel reader.\nMetrics for UnorderedScan.\nScans a region without providing any output ordering …\nDuration to build sources.\nScans the region and returns a stream.\nDuration to convert batches.\nReturns whether to scan in parallel.\nFetch a batch from the source and convert it into a record …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new UnorderedScan.\nNumber of batches returned.\nNumber of rows returned.\nDuration to prepare the scan task.\nDuration to scan data.\nScans all sources in parallel.\nScans all sources one by one.\nDuration of the scan.\nThe region is altering.\nThe region is dropping.\nThis is the approximate factor to estimate the size of wal.\nThe region is handling a region edit.\nContext to update the region manifest.\nMetadata and runtime status of a region.\nThe region is opened but is still read-only.\nRegions indexed by ids.\nState of the region.\nRegion status include region id, memtable usage, sst …\nThe region is truncating.\nThe region is opened and is writable.\nSSTs accessor for this region.\nClear the map.\nSets the state of the region to given state if the current …\nEstimated WAL size in bytes. Use the memtables size to …\nSST file purger.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets region by region id.\nInserts a new region into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the region exists.\nReturns whether the region is writable.\nReturns last flush timestamp in millis.\nLast flush time in millis.\nList all regions.\nContext to maintain manifest for this region.\nManager to maintain manifest for this region.\nMemtable builder for the region.\nReturns current metadata of the region.\nRegion opener.\nOptions for a region.\nReturns the region dir.\nId of this region.\nReturns the region usage in bytes.\nRemove region by id.\nSets the altering state. You should call this method in …\nSets the dropping state. You should call this method in …\nSets the editing state. You should call this method in the …\nSets the region to readonly gracefully. This acquires the …\nSets the truncating state. You should call this method in …\nSets the writable state.\nReturns the state of the region.\nThe state of the region. The region checks the state …\nStop background managers for this region.\nSwitches the region state to <code>RegionState::Writable</code> if the …\nProvider to get current time.\nUpdate flush time to current time.\nUpdates the manifest if current state is <code>expect_state</code> and …\nVersion control of mito engine.\nReturns current version of the region.\nVersion controller for this region.\nWal options of this region.\nGets writable region by region id.\nGets writable region by region id.\nBuilder to create a new MitoRegion or open an existing one.\nSets the cache manager for the region.\nChecks whether the recovered region has the same schema as …\nWrites region manifest and creates a new region if it does …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new manifest options.\nTries to open the region and returns <code>None</code> if the region …\nSets metadata of the region to create.\nReturns a new opener.\nReturns the directory to the manifest files.\nReturns an object store corresponding to <code>name</code>. If <code>name</code> is …\nOpens an existing region in read only mode.\nSets options for the region.\nParses and sets options for the region.\nReplays the mutations from WAL and inserts mutations to …\nSets the <code>skip_wal_replay</code>.\nOptions for compactions\nOptions for index.\nOptions for the inverted index.\nOptions for region level memtable.\nPartition tree memtable options.\nOptions that affect the entire region.\nWe need to define a new struct without enum fields as …\nTime window compaction strategy.\nTime window compaction options.\nIf append mode is enabled, the region keeps duplicate rows.\nCompaction options.\nNumber of rows to freeze a data part.\nTotal bytes of dictionary to keep in fork.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe column ids that should be ignored when building the …\nMax keys in an index shard.\nIndex options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions for the inverted index.\nMax num of files that can be kept in active writing time …\nMax num of files that can be kept in inactive time window.\nMemtable options.\nConverts the <code>options</code> map to a json object.\nThe number of rows in a segment.\nCustom storage. Uses default storage if it is <code>None</code>.\nCompaction time window defined when creating tables.\nReturns time window in second resolution.\nRegion SST files TTL.\nRegion SST files TTL.\nValidates whether the <code>options_map</code> has valid options for …\nWal options.\nStatic metadata of a region.\nVersion builder.\nControls metadata and sequence numbers for a region.\nData of VersionControl.\nAdd files to the builder.\nAlter schema of the region.\nApply edit to the builder.\nApply edit to current version.\nBuilds a new Version from the builder.\nSequence number of last committed data.\nSets compaction time window.\nInferred compaction time window.\nReturns current copy of data.\nSets flushed entry id.\nInclusive max WAL entry id of flushed data.\nSets flushed sequence.\nInclusive max sequence of flushed data.\nFreezes the mutable memtable if it is not empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new builder from an existing version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker of whether this region is dropped/dropping\nLast WAL entry Id.\nMark all opened files as deleted and set the delete marker …\nSets memtables.\nMutable and immutable memtables.\nSets metadata.\nMetadata of the region.\nReturns a new builder.\nReturns a new VersionControl with specific <code>version</code>.\nSets options.\nOptions of the region.\nRemove memtables from the builder.\nUpdates committed sequence and entry id.\nSSTs of the region.\nTruncate current version.\nSets truncated entty id.\nLatest entry id during the truncating table.\nLatest version.\nContext to keep region metadata and buffer write requests.\nNotifier to notify write result on drop.\nEncode and add WAL entry to the writer.\nRows to delete.\nError to send to the waiter.\nThe write operation is failed and we should not write to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new notify from the <code>sender</code>.\nReturns an empty context.\nNext entry id of WAL to write.\nNext sequence number to write.\nNotifiers to send write results to waiters.\nSend result to the waiter.\nNumber of rows to be written.\nPush mutation to the context.\nRows to put.\nId of region to write.\nSender to send write result to the waiter for this …\nSets error and marks all write operations are failed.\nUpdates next entry id.\nVersion of the region while creating the context.\nVersionControl of the region.\nValid WAL entry to write.\nWal options of the region being written to.\nConsumes mutations and writes them into mutable memtable.\nNotifications from internal background jobs.\nNotification from a background job.\nA failing compaction result.\nCompaction has failed.\nNotifies a compaction job has finished.\nCompaction has finished.\nDdl request to a region.\nDDL request to a region.\nUse RegionEdit to edit a region directly.\nNotifies a flush job is failed.\nFlush has failed.\nNotifies a flush job is finished.\nFlush has finished.\nCallback on failure.\nOptional output result sender.\nOneshot output result sender.\nSender and Ddl request.\nSender and write request.\nThe internal commands.\nNotify a worker to stop.\nTruncate result.\nNotifies the truncate result of a region.\nRequest sent to a worker\nWrite to a region.\nRequest to write a region.\nFlush timer.\nChecks whether we should allow a row doesn’t provide …\nChecks schema of rows is compatible with schema of the …\nReturns the default value for specific column.\nGets column index by name.\nThe error source of the failure.\nThe error source of the failure.\nReturns estimated size of the request.\nFills default value for specific <code>column</code>.\nTries to fill missing columns.\nEntry id of flushed data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether each column has null.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap column name to column index in <code>rows</code>.\nCreates a new request.\nCreates a new output sender.\nCreates a sender.\nCreates an empty sender.\nHandles <code>err</code> on failure.\nCompaction succeeded but failed to update manifest or …\nMarks the flush job as successful and observes the timer.\nType of the write request.\nRegion to write.\nRegion id of the request.\nRegion id.\nRegion id.\nRegion id.\nDdl request.\nTruncate result.\nRows to write.\nSends the <code>result</code>.\nSends the <code>result</code> and consumes the sender.\nSends the <code>result</code> and consumes the inner sender.\nResult sender.\nResult sender.\nResult sender.\nFlush result senders.\nCompaction result senders.\nStart time of compaction task.\nTakes the inner sender.\nTruncated entry id.\nTruncated sequence.\nConverts request from a RegionRequest.\nValidate proto value schema.\nInternal notification.\nId of the region to send.\nId of the region to send.\nThe sender of SetReadonlyResponse.\nA memory-comparable row Value encoder/decoder.\nRow value encoder/decoder.\nDecode row values from bytes.\nDecode value at <code>pos</code> in <code>bytes</code>.\nEncodes rows to bytes.\nEncodes rows to specific vec.\nEstimated length for encoded bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSkip deserializing this field, returns the length of it.\nRequest scheduler based on local state.\nThe state of scheduler\nScheduler defines a set of API to schedule Jobs\nToken used to halt the scheduler\nReturns the argument unchanged.\nTask handles\nCalls <code>U::from(self)</code>.\nStarts a new scheduler.\nSchedules a Job\nSends jobs to flume bounded channel\nState of scheduler\nStops scheduler. If <code>await_termination</code> is set to true, the …\nif await_termination is true, scheduler will wait all …\nDefault write buffer size, it should be greater than the …\nDefault number of concurrent write, it only works on …\nStructures to describe metadata of files.\nSST in parquet format.\nSST version.\nHandle to a SST file.\nInner data of FileHandle.\nUnique id for [SST File].\nMetadata of a SST file.\nTime range of a SST file.\nType of index.\nInverted index.\nType to store SST level.\nMaximum level of SSTs.\nSNAFU context selector for the <code>ParseIdError</code> error\nAppend <code>.parquet</code> to file id to make a complete file name\nAppend <code>.puffin</code> to file id to make a complete file name\nAvailable indexes of the file.\nReturns the file id.\nCompared to normal file names, FileId ignore the extension\nReturns the complete file path of the file.\nSize of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSize of the index file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSST level of the file.\nMark the file as deleted and will delete it on drop …\nParses id from string.\nReturns a new unique FileId randomly.\nReturns the region id of the file.\nRegion of file.\nReturns the time range of the file.\nTimestamp range of file.\nA worker to delete files in background.\nPurger that purges file for current region.\nRequest to remove a file.\nFile meta.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new purger.\nSend a purge request to the background worker.\nThe index creator that hides the error handling details.\nAbort the index creation.\nSanity check for arguments and create a new Indexer with …\nFinish the index creation. Returns the number of bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the index with the given batch.\nThe <code>SstIndexApplier</code> is responsible for applying predicates …\nApplies predicates to the provided SST file id and returns …\nHelper function to create a <code>PuffinFileReader</code> from the …\nThe cache of index files.\nReturns the argument unchanged.\nPredefined index applier used to apply predicates to index …\nHelper function to create a [<code>PuffinBlobReader</code>] for the …\nCalls <code>U::from(self)</code>.\nCreates a new <code>SstIndexApplier</code>.\nThe root directory of the region.\nRegion ID.\nHelper function to create a <code>PuffinFileReader</code> from the …\nStore responsible for accessing remote index files.\nConstructs an <code>SstIndexApplier</code> which applies predicates to …\nHelper function to add a predicate to the output.\nConsumes the builder to construct an <code>SstIndexApplier</code>, …\nCollects a <code>BETWEEN</code> expression in the form of …\nCollects a comparison expression in the form of …\nCollects an eq expression in the form of <code>column = lit</code>.\nRecursively collects eq list.\nCollects an in list expression in the form of …\nCollects eq list in the form of …\nCollects a regex match expression in the form of …\nHelper function to get the column name of a column …\nHelper function to encode a literal into bytes.\nFile cache, required argument for constructing …\nReturns the argument unchanged.\nColumn ids to ignore.\nCalls <code>U::from(self)</code>.\nMetadata of the region, used to get metadata like column …\nCreates a new <code>SstIndexApplierBuilder</code>.\nHelper function to get a non-null literal.\nObject store, required argument for constructing …\nStores predicates during traversal on the Expr tree.\nDirectory of the region, required argument for …\nHelper function to get the column id and the column type …\nRecursively traverses expressions to collect predicates. …\nEncodes index values according to their data types for …\nDecodes primary key values into their corresponding column …\nThe tag column ids.\nDecodes a primary key into its corresponding column ids, …\nThe decoder for the primary key.\nSerializes a non-null <code>ValueRef</code> using the data type defined …\nThe data types of tag columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>IndexValuesCodec</code> from a list of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum memory usage threshold for one column.\nThe buffer size for the pipe used to send index data to …\nCreates SST index.\nAborts index creation and clean up garbage.\nWhether the index creation is aborted.\nCodec for decoding primary keys.\nData flow of finishing index:\nPath of index file to write.\nFinishes index creation and cleans up garbage. Returns the …\nReturns the argument unchanged.\nIgnore column IDs for index creation.\nThe index creator.\nCalls <code>U::from(self)</code>.\nThe memory usage of the index creator.\nCreates a new <code>SstIndexCreator</code>. Should ensure that the …\nStatistics of index creation.\nThe store to write index files.\nThe provider of intermediate files.\nUpdates index with a batch of rows. Garbage will be …\nReusable buffer for encoding index values.\nSets the write buffer size of the store.\nSets the ignore column IDs for index creation.\nStage of the index creation process.\nStatistics for index creation. Flush metrics when dropped.\n<code>TimerGuard</code> is a RAII struct that ensures elapsed time is …\nReturns byte count.\nNumber of bytes in the index.\nAccumulated elapsed time for the cleanup stage.\nAccumulated elapsed time for the index finish stage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncreases the byte count of the index creation statistics.\nIncreases the row count of the index creation statistics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimerGuard</code>,\nStarts timing the cleanup stage, returning a <code>TimerGuard</code> to …\nStarts timing the finish stage, returning a <code>TimerGuard</code> to …\nStarts timing the update stage, returning a <code>TimerGuard</code> to …\nReturns row count.\nNumber of rows in the index.\nAccumulated elapsed time for the index update stage.\n<code>TempFileProvider</code> implements <code>ExternalTempFileProvider</code>. It …\nRemoves all intermediate files.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides the location of intermediate files.\nProvides store to access to intermediate files.\nCreates a new <code>TempFileProvider</code>.\n<code>IntermediateLocation</code> produces paths for intermediate files …\n<code>IntermediateManager</code> provides store to access to …\nReturns the path of the directory for intermediate files …\nReturns the directory to clean up when the sorting is done\nReturns the path of the intermediate file with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>IntermediateManager</code> with the given root path. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>IntermediateLocation</code>. Set the root directory …\nReturns the store to access to intermediate files.\nSet the write buffer size for the store.\nA guard that increments a counter when dropped.\nA wrapper around <code>AsyncRead</code> that adds instrumentation for …\nA wrapper around <code>AsyncWrite</code> that adds instrumentation for …\nA wrapper around <code>ObjectStore</code> that adds instrumentation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrement the counter by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxies to <code>ObjectStore::list</code>.\nCreate a new <code>CounterGuard</code>.\nCreate a new <code>InstrumentedStore</code>.\nCreate a new <code>InstrumentedAsyncRead</code>.\nCreate a new <code>InstrumentedAsyncWrite</code>.\nThe underlying object store.\nReturns an <code>InstrumentedAsyncRead</code> for the given path. …\nProxies to <code>ObjectStore::remove_all</code>.\nSet the size of the write buffer.\nThe size of the write buffer.\nReturns an <code>InstrumentedAsyncWrite</code> for the given path. …\nReturns the path of the index file in the object store: …\nReturns the path of the SST file in the object store: …\nDefault batch size to read parquet files.\nDefault row group size for parquet files.\nKey of metadata in parquet SST.\nParquet SST info returned by the writer.\nParquet write options.\nFile Meta Data\nFile size in bytes.\nFormat to store in parquet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex file size in bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether inverted index is available.\nNumber of rows.\nParquet page reader.\nParquet reader.\nPorts private structs from parquet crate.\nRow group size.\nStatistics of parquet SSTs.\nTime range of the SST.\nBuffer size for async writer.\nParquet writer.\nNumber of columns that have fixed positions.\nHelper for reading the SST format.\nHelper for writing the SST format.\nGets the arrow schema to store in parquet.\nGets the arrow schema of the SST file.\nSST file schema.\nSST file schema.\nReturns null counts of specific non-tag columns.\nReturns min/max values of specific non-tag columns.\nConvert <code>batch</code> to a arrow record batch to store in parquet.\nConvert a arrow record batch into <code>batches</code>.\nField column id to its index in <code>schema</code> (SST schema). In …\nField column id to their index in the projected schema ( …\nIndex of a field column by its column id. This function is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet fields from <code>record_batch</code>.\nFields for internal columns.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns max values of specific column in row groups.\nGets the metadata of the SST.\nReturns min values of specific column in row groups.\nCreates a new helper.\nCreates a helper with existing <code>metadata</code>.\nCreates a new array for specific <code>primary_key</code>.\nReturns null counts of specific column in row groups.\nCompute offsets of different primary keys in the array.\nIndex in SST of the primary key.\nGets sorted projection indices to read <code>columns</code> from …\nReturns min/max values of specific tag.\nIndex in SST of the time index.\nGets the arrow schema to store in parquet.\nFetches data from object store. If the object store …\nFetches data from object store concurrently.\nFetches data from object store sequentially\nTakes a function and spawns it to a tokio blocking pool if …\nParse tokio error into opendal::Error.\nParses column orders from Thrift definition. If no column …\nConvert format::FileMetaData to ParquetMetaData\nThe estimated size of the footer and metadata need to read …\nLoad the metadata of parquet file in an async way.\nReturns the argument unchanged.\nGet the size of parquet file.\nCalls <code>U::from(self)</code>.\nAsync load the metadata of parquet file.\nCreate a new parquet metadata loader.\nA reader that reads from cached pages.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new reader from existing pages.\nGet PageMetadata from <code>page</code>.\nCached pages.\nParquet reader metrics.\nParquet batch reader to read our SST format.\nParquet SST reader builder.\nBuilder to build a ParquetRecordBatchReader for a row …\nBuffered batches to return.\nBuilds and initializes a ParquetReader.\nBuilds a ParquetRecordBatchReader to read the row group at …\nDuration to build the parquet reader.\nAttaches the cache to the builder.\nManager that caches SST data.\nCache.\nDecoder for primary keys\nReader of current row group.\nAttaches the expected metadata to the builder.\nExpected metadata of the region while reading the SST. …\nTries to fetch next RecordBatch from the reader.\nField levels to read.\nSST directory.\nSST file to read.\nPath of the file to read.\nPath of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes region metadata from key value.\nAttaches the index applier to the builder.\nIndex applier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata of the SST.\nLocal metrics.\nReturns a new ParquetReaderBuilder to read specific SST.\nNumber of batches decoded.\nNumber of record batches read.\nNumber of row groups before filtering.\nNumber of row groups filtered by inverted index.\nNumber of row groups filtered by min-max index.\nNumber of rows read.\nNumber of rows in row group before filtering.\nNumber of rows in row group filtered by inverted index.\nNumber of rows filtered by precise filter.\nObject store as an Operator.\nMetadata of the parquet file.\nTRY THE BEST to perform pushed down predicate precisely on …\nAttaches the predicate to the builder.\nPredicate to push down.\nPredicate pushed down to this reader.\nAttaches the projection to the builder.\nMetadata of columns to read.\nProjection mask.\nPrunes batches by the pushed down predicate.\nApplies index to prune row groups.\nPrunes row groups by min-max index.\nHelper to read record batches.\nReads parquet metadata of specific file.\nBuilder to build row group readers.\nIndices of row groups to read, along with their respective …\nComputes row groups to read, along with their respective …\nDuration to scan the reader.\nAttaches the time range to the builder.\nTime range to filter.\nAn in-memory column chunk\nImplements <code>PageIterator</code> for a single column chunk, …\nFull column chunk and its offset\nAn in-memory collection of column chunks\nColumn chunk data representing only a subset of data pages\nCached pages for each column.\nCreates a page reader to read column at <code>i</code>.\nCreates a new InMemoryRowGroup by <code>row_group_idx</code>.\nFetches the necessary column data into memory\nTry to fetch data from WriteCache, if not in WriteCache, …\nFetches pages for columns if cache is enabled.\nFetches data from write cache. Returns <code>None</code> if the data is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObject store.\nSet of data pages included in this sparse chunk. Each …\nLength of the full column chunk\nHelper function to either add a new <code>RowSelector</code> to …\nConverts an iterator of row ranges into a <code>RowSelection</code> by …\nStatistics for pruning row groups.\nReturns the column id of specific column name if we need …\nThe metadata of the region. It contains the schema a query …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new statistics to prune specific <code>row_groups</code>.\nHelper to read the SST.\nMetadata of SST row groups.\nParquet SST writer.\nCustomizes per-column config according to schema and maybe …\nSST output file path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegion metadata of the source and the target SST.\nCreates a new parquet SST writer.\nNumber of rows fetched.\nTime range of fetched batches.\nIterates source and writes all rows to Parquet file.\nMetadata of files in the same SST level.\nA version of all SSTs in a region.\nAdd files to the version.\nHandles of SSTs in this level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns expired SSTs from current level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLevel number.\nReturns a slice to metadatas of all levels.\nSST metadata organized by levels.\nMarks all SSTs in this version as deleted.\nReturns a new SstVersion.\nReturns an empty meta of specific <code>level</code>.\nRemove files from the version.\nReturns SST files’space occupied in current version.\nDefault implementation of the time provider based on std.\nTrait to get current time and deal with durations.\nReturns current time in millis.\nReturns millis elapsed since specify time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the actual duration to wait from an expected one.\nWAL entry id.\nWrite ahead log.\nA stream that yields tuple of WAL entry id and …\nWAL batch writer.\nAdd an wal entry for specific region to the writer’s …\nDecode Wal entry from log store.\nEntries to write.\nBuffer to encode WAL entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNamespaces of regions being written into.\nCreates a new Wal from the log store.\nMark entries whose ids <code>&lt;= last_id</code> as deleted.\nScan entries of specific region starting from <code>start_id</code> …\nLog store of the WAL.\nThe underlying log store.\nWrite all buffered entries to the WAL.\nReturns a writer to write to the WAL.\nInterval to check whether regions should flush.\nMax delay to check region periodical tasks.\nWorker to write and alter regions bound to it.\nBackground worker loop to handle requests.\nBuffer for stalled write requests.\nA fixed size group of RegionWorkers.\nIdentifier for a worker.\nWrapper that only calls event listener in tests.\nWorker start config.\nAppends stalled requests.\nReturns cache of the group.\nCache.\nCache.\nScheduler for compaction tasks.\nEngine config.\nRegions that are not yet fully dropped.\nEstimated size of all stalled requests.\nFlushes regions periodically.\nFinds some regions to flush to reduce write buffer usage.\nSchedules background flush requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns region of specific <code>region_id</code>.\nReturns region of specific <code>region_id</code>.\nHandle to the worker thread.\nHandling alter related requests.\nHandles region background request\nHandling catchup request.\nHandling close request.\nWhen compaction fails, we simply log the error.\nHandles compaction finished, update region version and …\nHandles compaction request submitted to region worker.\nHandling create request.\nTakes and handles all ddl requests.\nHandling drop request.\nHandling flush related requests.\nOn region flush job failed.\nOn region flush job finished.\nHandles manual flush request.\nHandles manifest.\nWrites region change action to the manifest and then …\nWrites truncate action to the manifest and then applies it …\nHandling open request.\nHandle periodical tasks such as region auto flush.\nHandles region edit request.\nDispatches and processes requests.\nHandling truncate related requests.\nHandles truncate result.\nHandling write requests.\nTakes and handles all write requests.\nId of the worker.\nId of the worker.\nIntermediate manager for inverted index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the worker contains specific region.\nReturns true if the specific region exists.\nReturns true if the worker is still running.\nLast time to check regions periodically.\nEvent listener for tests.\nChecks whether the engine reaches flush threshold. If so, …\nMemtable builder provider for each region.\nCreates a flush task with specific <code>reason</code> for the <code>region</code>.\nManages object stores for manifest and SSTs.\nFlush is finished successfully.\nOn later drop task is finished.\nEngine is stalled.\nValidates and groups requests by region.\nBackground purge job scheduler.\nScheduler for file purgers.\nRequest receiver.\nRegions bound to the worker.\nRegions bound to the worker.\nStalled requests.\nStarts the worker loop.\nWhether to run the worker thread.\nWhether the worker thread is still running.\nGlobal background job scheduelr.\nRequest sender.\nRequest sender.\nHandles <code>set_readonly_gracefully</code>.\nSets whether the worker is still running.\nReturns true if the engine needs to reject some write …\nStalled write requests.\nStarts a region worker and its background thread.\nStarts a worker group.\nStop the worker.\nStops the worker group.\nSubmits request to background worker thread.\nSubmits a request to a worker in the group.\nProvider to get current time.\nWAL of the engine.\nGet worker for specific <code>region_id</code>.\nComputes a initial check delay for a worker.\nWorkers of the group.\nEngine write buffer manager.\nCreates a metadata after applying the alter <code>request</code> to the …\nBackground GC task to remove the entire region path once …\nRemoves region dir if there is no parquet files, returns …\nChecks the edit, writes and applies it.\nRejects delete request under append mode.\nChecks the schema and fill missing columns.\nSend rejected error to all <code>write_requests</code>.")